ARM GAS  /tmp/cc3lmvDm.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"uart_printf.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.print_char,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	print_char:
  23              	.LFB248:
  24              		.file 1 "../codebase/uart_printf.c"
   1:../codebase/uart_printf.c **** /*
   2:../codebase/uart_printf.c ****  * To change this license header, choose License Headers in Project Properties.
   3:../codebase/uart_printf.c ****  * To change this template file, choose Tools | Templates
   4:../codebase/uart_printf.c ****  * and open the template in the editor.
   5:../codebase/uart_printf.c ****  */
   6:../codebase/uart_printf.c **** 
   7:../codebase/uart_printf.c **** /* 
   8:../codebase/uart_printf.c ****  * File:   uart_printf.c
   9:../codebase/uart_printf.c ****  * Author: tejas_tj
  10:../codebase/uart_printf.c ****  * 
  11:../codebase/uart_printf.c ****  * Created on 24 September, 2018, 3:58 PM
  12:../codebase/uart_printf.c ****  */
  13:../codebase/uart_printf.c **** 
  14:../codebase/uart_printf.c **** #include "uart_printf.h"
  15:../codebase/uart_printf.c **** #include "stm32l011xx.h"
  16:../codebase/uart_printf.c **** #include "stm32l0xx_ll_usart.h"
  17:../codebase/uart_printf.c **** 
  18:../codebase/uart_printf.c **** static void print_char(uint8_t ch)
  19:../codebase/uart_printf.c **** {
  25              		.loc 1 19 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  31              	.LBB6:
  32              	.LBB7:
  33              		.file 2 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h"
   1:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @file    stm32l0xx_ll_usart.h
   4:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   ******************************************************************************
ARM GAS  /tmp/cc3lmvDm.s 			page 2


   7:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @attention
   8:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *
   9:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  10:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *
  11:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *      may be used to endorse or promote products derived from this software
  20:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *      without specific prior written permission.
  21:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *
  22:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *
  33:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   ******************************************************************************
  34:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  35:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  36:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #ifndef __STM32L0xx_LL_USART_H
  38:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define __STM32L0xx_LL_USART_H
  39:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  40:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #ifdef __cplusplus
  41:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** extern "C" {
  42:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
  43:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  44:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #include "stm32l0xx.h"
  46:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  47:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @addtogroup STM32L0xx_LL_Driver
  48:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
  49:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  50:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  51:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART4) || defined (USART5)
  52:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  53:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL USART
  54:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
  55:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  56:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  57:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  60:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  61:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  62:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
  63:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/cc3lmvDm.s 			page 3


  64:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  65:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Defines used for the bit position in the register and perform offsets*/
  66:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define USART_POSITION_CR1_DEDT                 (uint32_t)16
  67:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define USART_POSITION_CR1_DEAT                 (uint32_t)21
  68:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define USART_POSITION_CR2_ADD                  (uint32_t)24
  69:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define USART_POSITION_CR3_SCARCNT              (uint32_t)17
  70:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define USART_POSITION_RTOR_BLEN                (uint32_t)24
  71:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define USART_POSITION_GTPR_GT                  (uint32_t)8
  72:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
  73:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
  74:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  75:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  76:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  77:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  78:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  79:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
  80:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  81:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
  82:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
  83:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  84:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  85:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  86:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  87:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  88:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  89:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
  90:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  91:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  92:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
  93:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  94:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  95:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** typedef struct
  96:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
  97:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  98:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  99:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
 102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
 103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
 107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
ARM GAS  /tmp/cc3lmvDm.s 			page 4


 121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** } LL_USART_InitTypeDef;
 132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** typedef struct
 137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
ARM GAS  /tmp/cc3lmvDm.s 			page 5


 178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error fla
 181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error fl
 182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_NCF                        USART_ICR_NCF                 /*!< Noise detected f
 183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error fl
 184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_TCBGTCF                    USART_ICR_TCBGTCF             /*!< Transmission com
 188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
 189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS flag */
 191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block fla
 193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
 208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_RXNE                       USART_ISR_RXNE                /*!< Read data regist
 209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_TXE                        USART_ISR_TXE                 /*!< Transmit data re
 211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
 216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_TCBGT                      USART_ISR_TCBGT               /*!< Transmission com
 227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
 228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
ARM GAS  /tmp/cc3lmvDm.s 			page 6


 235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR3_TCBGTIE                    USART_CR3_TCBGTIE             /*!< Transmission com
 250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
 251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 (uint32_t)0x00000000U              /*!< Transmitter
 259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    (uint32_t)0x00000000U                /*!< Parity co
 270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                (uint32_t)0x00000000U /*!<  USART wake up from Mute
 280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
 289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   (uint32_t)0x00000000U   /*!< 8 bits word length : S
 290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
ARM GAS  /tmp/cc3lmvDm.s 			page 7


 292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                (uint32_t)0x00000000U  /*!< Oversampling by 16 */
 299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  (uint32_t)0x00000000U  /*!< Clock signal not provid
 310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         (uint32_t)0x00000000U /*!< The clock pulse of the l
 320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    (uint32_t)0x00000000U /*!< The first clock transiti
 329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   (uint32_t)0x00000000U /*!< Steady low value on SCLK
 338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     (uint32_t)0x00000000U                      /*!< 1 s
 348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
ARM GAS  /tmp/cc3lmvDm.s 			page 8


 349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  (uint32_t)0x00000000U /*!< TX/RX pins are used as d
 358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
 364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           (uint32_t)0x00000000U /*!< RX pin signal works usin
 367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           (uint32_t)0x00000000U /*!< TX pin signal works usin
 376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
 377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          (uint32_t)0x00000000U /*!< Logical data from the da
 385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              (uint32_t)0x00000000U /*!< data is transmitted/rece
 394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    (uint32_t)0x00000000U                       /*!< Me
 403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
ARM GAS  /tmp/cc3lmvDm.s 			page 9


 406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              (uint32_t)0x00000000U /*!< 4-bit address detection 
 414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
 415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 (uint32_t)0x00000000U                /*!< CTS and R
 423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              (uint32_t)0x00000000U                   /*!< Wake u
 434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
 436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              (uint32_t)0x00000000U /*!< IrDA normal power mode *
 444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            (uint32_t)0x00000000U /*!< 10-bit break detection m
 453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
 459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               (uint32_t)0x00000000U /*!< DE signal is active high
 462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
ARM GAS  /tmp/cc3lmvDm.s 			page 10


 463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          (uint32_t)0U          /*!< Get address of data regi
 471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           (uint32_t)1U          /*!< Get address of data regi
 472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Write a value in USART register
 491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __REG__ Register to be written
 493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Read a value in USART register
 500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __REG__ Register to be read
 502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Register value
 503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/cc3lmvDm.s 			page 11


 520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__) ((((__PERIPHCLK__)*2) + ((__BAUDRATE_
 521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__) (((__PERIPHCLK__) + ((__BAUDRATE__)/
 530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART Enable
 551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
ARM GAS  /tmp/cc3lmvDm.s 			page 12


 577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
 587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
 588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UESM);
 598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(USART_TypeDef *USARTx)
 623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM));
 625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc3lmvDm.s 			page 13


 634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Receiver Disable
 640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Transmitter Enable
 651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Transmitter Disable
 662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         of Transmitter and Receiver
 674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
ARM GAS  /tmp/cc3lmvDm.s 			page 14


 691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/cc3lmvDm.s 			page 15


 748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
 769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
 770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
 773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
 785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
 786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
 789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
 799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
 800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
 804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/cc3lmvDm.s 			page 16


 805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_MME);
 806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
 810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
 811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
 815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
 817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
 821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
 822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(USART_TypeDef *USARTx)
 826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME));
 828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Oversampling mode
 846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
ARM GAS  /tmp/cc3lmvDm.s 			page 17


 862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
ARM GAS  /tmp/cc3lmvDm.s 			page 18


 919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/cc3lmvDm.s 			page 19


 976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
 997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
1001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
1003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
1007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
1014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
1016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set the length of the stop bits
1020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
ARM GAS  /tmp/cc3lmvDm.s 			page 20


1033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
1037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
1045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
1051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                               uint32_t StopBits)
1078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
ARM GAS  /tmp/cc3lmvDm.s 			page 21


1090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
1093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(USART_TypeDef *USARTx)
1106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
1108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
1127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(USART_TypeDef *USARTx)
1133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
ARM GAS  /tmp/cc3lmvDm.s 			page 22


1147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(USART_TypeDef *USARTx)
1160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
1162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure Binary data logic.
1166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(USART_TypeDef *USARTx)
1189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/cc3lmvDm.s 			page 23


1204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
1207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(USART_TypeDef *USARTx)
1220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
1222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(USART_TypeDef *USARTx)
1259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN));
ARM GAS  /tmp/cc3lmvDm.s 			page 24


1261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
1277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
1279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(USART_TypeDef *USARTx)
1294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
1301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
ARM GAS  /tmp/cc3lmvDm.s 			page 25


1318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(USART_TypeDef *USARTx)
1327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN));
1329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Address of the USART node.
1333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
1334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         for wake up with address mark detection.
1335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
1336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         value and CMF flag is set on match)
1345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
1355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_POSITION_CR2_ADD)));
1358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
1371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_POSITION_CR2_ADD);
1373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
ARM GAS  /tmp/cc3lmvDm.s 			page 26


1375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
1378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(USART_TypeDef *USARTx)
1384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
1390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
1393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
1412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
ARM GAS  /tmp/cc3lmvDm.s 			page 27


1432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
1448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
1465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
1473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable One bit sampling method
1479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
ARM GAS  /tmp/cc3lmvDm.s 			page 28


1489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Overrun detection
1512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Overrun detection
1523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(USART_TypeDef *USARTx)
1539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS);
1541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc3lmvDm.s 			page 29


1546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(USART_TypeDef *USARTx)
1572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (Baud rate value != 0)
1582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                           uint32_t BaudRate)
1593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   register uint32_t brrtemp = 0x0U;
1596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
1599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
1601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     USARTx->BRR = brrtemp;
ARM GAS  /tmp/cc3lmvDm.s 			page 30


1603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
1604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   else
1605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
1606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
1608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Baud Rate
1621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
1631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     {
1633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     }
1636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
1637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   else
1638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
1639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     {
1641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     }
1643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
1644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (brrresult);
1645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
1649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
1650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
1655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
1657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
ARM GAS  /tmp/cc3lmvDm.s 			page 31


1660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
1661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
1662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(USART_TypeDef *USARTx)
1666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
1668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Block Length value in reception
1672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
1673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
1675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
1678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_POSITION_RTOR_BLEN);
1680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Get Block Length value in reception
1684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
1685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
1687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(USART_TypeDef *USARTx)
1689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_POSITION_RTOR_BLEN);
1691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
1695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
1699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable IrDA mode
1703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable IrDA mode
1716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc3lmvDm.s 			page 32


1717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
1738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
ARM GAS  /tmp/cc3lmvDm.s 			page 33


1774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
1802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
1806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/cc3lmvDm.s 			page 34


1831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
ARM GAS  /tmp/cc3lmvDm.s 			page 35


1888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
1891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
1892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         generating a transmission error (FE bit set).
1893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
1894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
1895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
1896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
1898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
1901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_POSITION_CR3_SCARCNT);
1903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
1907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
1910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
1912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(USART_TypeDef *USARTx)
1914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_POSITION_CR3_SCARCNT);
1916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
ARM GAS  /tmp/cc3lmvDm.s 			page 36


1945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_POSITION_GTPR_GT);
1960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
1972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_POSITION_GTPR_GT);
1974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
1978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
1982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
ARM GAS  /tmp/cc3lmvDm.s 			page 37


2002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
2015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
2019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
2021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
2025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
2028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
2029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
2038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
2058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/cc3lmvDm.s 			page 38


2059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
2060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable LIN mode
2064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable LIN mode
2077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
2080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
2097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
2099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
2103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
2107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
ARM GAS  /tmp/cc3lmvDm.s 			page 39


2116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_POSITION_CR1_DEDT);
2121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(USART_TypeDef *USARTx)
2132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_POSITION_CR1_DEDT);
2134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_POSITION_CR1_DEAT);
2148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(USART_TypeDef *USARTx)
2159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_POSITION_CR1_DEAT);
2161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
2172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/cc3lmvDm.s 			page 40


2173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
2174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
2194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(USART_TypeDef *USARTx)
2198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM));
2200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(USART_TypeDef *USARTx)
2229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/cc3lmvDm.s 			page 41


2230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
2231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
2235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
2239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
2243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
2256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         dedicated functions
2258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
2263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
2267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
2270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
2277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
2278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
2283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
2284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
2285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
ARM GAS  /tmp/cc3lmvDm.s 			page 42


2287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
2292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
2293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         dedicated functions
2294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
2295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
2296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
2297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
2298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
2299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
2303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
2305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
2310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
2311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
2315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
2316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
2321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
2330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
2331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
2332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         dedicated functions
2333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
2334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
2335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
2336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
2337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
2338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
2339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
2343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/cc3lmvDm.s 			page 43


2344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
2345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
2346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
2349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
2350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
2355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
2356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
2361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
2369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
2370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         dedicated functions
2372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
2373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
2374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
2375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
2376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
2377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
2381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
2383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
2385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
2387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
2388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
2393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
2394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
2398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
2399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
2400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc3lmvDm.s 			page 44


2401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
2409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
2410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         dedicated functions
2412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
2413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
2414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
2415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
2416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
2417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
2421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
2423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
2425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
2428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* Synchronous mode is activated by default */
2429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
2430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
2431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
2436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
2437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
2442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
2451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
2452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
2453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         dedicated functions
2454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
2455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
2456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
2457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
ARM GAS  /tmp/cc3lmvDm.s 			page 45


2458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
2459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
2460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
2464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
2466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
2467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
2468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
2469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
2471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
2476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
2477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
2478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
2479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
2491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
2492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         dedicated functions
2493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
2494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
2495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
2496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
2497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
2498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
2502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
2504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
2512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
ARM GAS  /tmp/cc3lmvDm.s 			page 46


2515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
2516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
2520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
2521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
2525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE));
2527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
2531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
2532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
2536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE));
2538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
2542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          NF            LL_USART_IsActiveFlag_NE
2543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
2547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE));
2549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
2553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
2554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
2558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE));
2560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
2564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
2565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
2569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
2571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
ARM GAS  /tmp/cc3lmvDm.s 			page 47


2572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
2575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
2576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
2580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
2582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
2586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
2587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
2591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
  34              		.loc 2 2592 0
  35 0000 064B     		ldr	r3, .L3
  36 0002 DA69     		ldr	r2, [r3, #28]
  37              	.LVL1:
  38              	.LBE7:
  39              	.LBE6:
  40              	.LBB8:
  41              	.LBB9:
2593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
2597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
2598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
2602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
2604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
2608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          LBDF          LL_USART_IsActiveFlag_LBD
2611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
2615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF));
2617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART CTS interrupt Flag is set or not
ARM GAS  /tmp/cc3lmvDm.s 			page 48


2621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          CTSIF         LL_USART_IsActiveFlag_nCTS
2624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
2628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_CTSIF) == (USART_ISR_CTSIF));
2630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
2634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          CTS           LL_USART_IsActiveFlag_CTS
2637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CTS(USART_TypeDef *USARTx)
2641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS));
2643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Receiver Time Out Flag is set or not
2647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
2648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(USART_TypeDef *USARTx)
2652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF));
2654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Flag is set or not
2658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          EOBF          LL_USART_IsActiveFlag_EOB
2661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_EOB(USART_TypeDef *USARTx)
2665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_EOBF) == (USART_ISR_EOBF));
2667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Error Flag is set or not
2671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
2672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
2673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          ABRE          LL_USART_IsActiveFlag_ABRE
2674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABRE(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc3lmvDm.s 			page 49


2678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_ABRE) == (USART_ISR_ABRE));
2680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Flag is set or not
2684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
2685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
2686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          ABRF          LL_USART_IsActiveFlag_ABR
2687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABR(USART_TypeDef *USARTx)
2691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_ABRF) == (USART_ISR_ABRF));
2693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Busy Flag is set or not
2697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          BUSY          LL_USART_IsActiveFlag_BUSY
2698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_BUSY(USART_TypeDef *USARTx)
2702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY));
2704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Character Match Flag is set or not
2708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          CMF           LL_USART_IsActiveFlag_CM
2709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CM(USART_TypeDef *USARTx)
2713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_CMF) == (USART_ISR_CMF));
2715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
2719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          SBKF          LL_USART_IsActiveFlag_SBK
2720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
2724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_SBKF) == (USART_ISR_SBKF));
2726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
2730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          RWU           LL_USART_IsActiveFlag_RWU
2731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc3lmvDm.s 			page 50


2735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_RWU) == (USART_ISR_RWU));
2737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from stop mode Flag is set or not
2741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
2742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
2743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          WUF           LL_USART_IsActiveFlag_WKUP
2744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_WKUP(USART_TypeDef *USARTx)
2748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF));
2750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Transmit Enable Acknowledge Flag is set or not
2754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
2755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
2759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK));
2761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Receive Enable Acknowledge Flag is set or not
2765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
2766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
2770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK));
2772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
2775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
2776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Flag is set or not
2778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ISR          TCBGT         LL_USART_IsActiveFlag_TCBGT
2779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TCBGT(USART_TypeDef *USARTx)
2783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TCBGT) == (USART_ISR_TCBGT));
2785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
2787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
2790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
2791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/cc3lmvDm.s 			page 51


2792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
2795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_PECF);
2797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
2801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
2802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
2806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_FECF);
2808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
2812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
2813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
2817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_NCF);
2819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
2823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
2824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
2828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
2830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
2834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
2835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
2839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
2841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
2845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
2846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/cc3lmvDm.s 			page 52


2849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
2850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
2852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
2855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
2856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear Smartcard Transmission Complete Before Guard Time Flag
2858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          TCBGTCF       LL_USART_ClearFlag_TCBGT
2859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TCBGT(USART_TypeDef *USARTx)
2863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCBGTCF);
2865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
2867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
2870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          LBDCF         LL_USART_ClearFlag_LBD
2873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
2877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
2879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
2883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          CTSCF         LL_USART_ClearFlag_nCTS
2886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
2890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CTSCF);
2892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear Receiver Time Out Flag
2896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
2897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
2901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
2903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
ARM GAS  /tmp/cc3lmvDm.s 			page 53


2906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear End Of Block Flag
2907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          EOBCF         LL_USART_ClearFlag_EOB
2910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_EOB(USART_TypeDef *USARTx)
2914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_EOBCF);
2916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear Character Match Flag
2920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          CMCF          LL_USART_ClearFlag_CM
2921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_CM(USART_TypeDef *USARTx)
2925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CMCF);
2927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Clear Wake Up from stop mode Flag
2931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
2932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
2933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll ICR          WUCF          LL_USART_ClearFlag_WKUP
2934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_WKUP(USART_TypeDef *USARTx)
2938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
2940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
2944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
2947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
2948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
2952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
2953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
2957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
ARM GAS  /tmp/cc3lmvDm.s 			page 54


2963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
2964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
2968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
2974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
2975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
2979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TCIE);
2981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
2985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
2986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
2990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
2992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
2996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
2997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
3001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_PEIE);
3003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Character Match Interrupt
3007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_EnableIT_CM
3008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CM(USART_TypeDef *USARTx)
3012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_CMIE);
3014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Receiver Timeout Interrupt
3018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
3019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/cc3lmvDm.s 			page 55


3020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
3023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
3025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable End Of Block Interrupt
3029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_EnableIT_EOB
3032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_EOB(USART_TypeDef *USARTx)
3036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_EOBIE);
3038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
3042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
3045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
3049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
3051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Error Interrupt
3055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           0: Interrupt is inhibited
3058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
3060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
3064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_EIE);
3066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
3070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
3073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc3lmvDm.s 			page 56


3077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
3079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Wake Up from Stop Mode Interrupt
3083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_EnableIT_WKUP
3086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_WKUP(USART_TypeDef *USARTx)
3090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_WUFIE);
3092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
3095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
3096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Smartcard Transmission Complete Before Guard Time Interrupt
3098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_EnableIT_TCBGT
3101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TCBGT(USART_TypeDef *USARTx)
3105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
3107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
3109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
3112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
3113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
3117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
3123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
3124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
3128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
3130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
ARM GAS  /tmp/cc3lmvDm.s 			page 57


3134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
3135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
3139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
3141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
3145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
3146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
3150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
3152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
3156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
3157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
3161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
3163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Character Match Interrupt
3167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_DisableIT_CM
3168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CM(USART_TypeDef *USARTx)
3172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_CMIE);
3174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Receiver Timeout Interrupt
3178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_DisableIT_RTO
3179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RTO(USART_TypeDef *USARTx)
3183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RTOIE);
3185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable End Of Block Interrupt
3189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
ARM GAS  /tmp/cc3lmvDm.s 			page 58


3191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_DisableIT_EOB
3192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_EOB(USART_TypeDef *USARTx)
3196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_EOBIE);
3198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
3202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
3205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
3209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
3211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Error Interrupt
3215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           0: Interrupt is inhibited
3218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
3220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
3224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
3226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
3230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
3233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
3237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
3239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Wake Up from Stop Mode Interrupt
3243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_DisableIT_WKUP
3246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/cc3lmvDm.s 			page 59


3248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_WKUP(USART_TypeDef *USARTx)
3250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_WUFIE);
3252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
3255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
3256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Smartcard Transmission Complete Before Guard Time Interrupt
3258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_DisableIT_TCBGT
3261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TCBGT(USART_TypeDef *USARTx)
3265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
3267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
3269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
3272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
3273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
3277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
3279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
3283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
3284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
3288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
3290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
3294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
3295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
3299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
3301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
ARM GAS  /tmp/cc3lmvDm.s 			page 60


3305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
3306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
3310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
3312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
3316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
3317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
3321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE));
3323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Character Match Interrupt is enabled or disabled.
3327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_IsEnabledIT_CM
3328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CM(USART_TypeDef *USARTx)
3332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_CMIE) == (USART_CR1_CMIE));
3334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Receiver Timeout Interrupt is enabled or disabled.
3338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_IsEnabledIT_RTO
3339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RTO(USART_TypeDef *USARTx)
3343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RTOIE) == (USART_CR1_RTOIE));
3345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Interrupt is enabled or disabled.
3349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_IsEnabledIT_EOB
3352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_EOB(USART_TypeDef *USARTx)
3356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_EOBIE) == (USART_CR1_EOBIE));
3358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
ARM GAS  /tmp/cc3lmvDm.s 			page 61


3362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
3365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
3369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE));
3371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
3375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
3376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
3380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
3382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
3386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
3389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
3393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE));
3395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from Stop Mode Interrupt is enabled or disabled.
3399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_IsEnabledIT_WKUP
3402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_WKUP(USART_TypeDef *USARTx)
3406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_WUFIE) == (USART_CR3_WUFIE));
3408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
3411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
3412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Interrupt is enabled or 
3414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_IsEnabledIT_TCBGT
3417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/cc3lmvDm.s 			page 62


3419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TCBGT(USART_TypeDef *USARTx)
3421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_TCBGTIE) == (USART_CR3_TCBGTIE));
3423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
3425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
3428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
3431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
3432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
3436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
3437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
3441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAR);
3443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
3447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
3448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
3452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
3454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
3458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
3459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(USART_TypeDef *USARTx)
3463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR));
3465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
3469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
3470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
3474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAT);
ARM GAS  /tmp/cc3lmvDm.s 			page 63


3476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable DMA Mode for transmission
3480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_DisableDMAReq_TX
3481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
3485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
3487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for transmission
3491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_IsEnabledDMAReq_TX
3492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_TX(USART_TypeDef *USARTx)
3496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAT) == (USART_CR3_DMAT));
3498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable DMA Disabling on Reception Error
3502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DDRE          LL_USART_EnableDMADeactOnRxErr
3503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMADeactOnRxErr(USART_TypeDef *USARTx)
3507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DDRE);
3509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable DMA Disabling on Reception Error
3513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DDRE          LL_USART_DisableDMADeactOnRxErr
3514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMADeactOnRxErr(USART_TypeDef *USARTx)
3518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
3520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if DMA Disabling on Reception Error is disabled
3524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DDRE          LL_USART_IsEnabledDMADeactOnRxErr
3525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMADeactOnRxErr(USART_TypeDef *USARTx)
3529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DDRE) == (USART_CR3_DDRE));
3531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
ARM GAS  /tmp/cc3lmvDm.s 			page 64


3533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Get the data register address used for DMA transfer
3535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RDR          RDR           LL_USART_DMA_GetRegAddr\n
3536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll TDR          TDR           LL_USART_DMA_GetRegAddr
3537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Direction This parameter can be one of the following values:
3539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
3540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
3541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Address of data register
3542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
3544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   register uint32_t data_reg_addr = 0U;
3546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
3548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
3549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     /* return address of TDR register */
3550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     data_reg_addr = (uint32_t) &(USARTx->TDR);
3551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
3552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   else
3553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
3554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     /* return address of RDR register */
3555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     data_reg_addr = (uint32_t) &(USARTx->RDR);
3556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
3557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return data_reg_addr;
3559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
3563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Data_Management Data_Management
3566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
3567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 8 bits)
3571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RDR          RDR           LL_USART_ReceiveData8
3572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
3574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
3576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
3578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
3579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 9 bits)
3582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RDR          RDR           LL_USART_ReceiveData9
3583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
3585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
3587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
3589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
ARM GAS  /tmp/cc3lmvDm.s 			page 65


3590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
3591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
3592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Write in Transmitter Data Register (Transmit Data value, 8 bits)
3593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll TDR          TDR           LL_USART_TransmitData8
3594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
3595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Value between Min_Data=0x00 and Max_Data=0xFF
3596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
3597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
3598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
3599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
3600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   USARTx->TDR = Value;
  42              		.loc 2 3600 0
  43 0004 9862     		str	r0, [r3, #40]
  44              	.L2:
  45              	.LBE9:
  46              	.LBE8:
  20:../codebase/uart_printf.c ****     LL_USART_IsActiveFlag_TC(USART2);
  21:../codebase/uart_printf.c ****     {
  22:../codebase/uart_printf.c ****         LL_USART_TransmitData8(USART2, ch);
  23:../codebase/uart_printf.c ****         while((USART2->ISR & USART_ISR_TXE_Msk) != USART_ISR_TXE);
  47              		.loc 1 23 0 discriminator 1
  48 0006 054B     		ldr	r3, .L3
  49 0008 DB69     		ldr	r3, [r3, #28]
  50 000a 1B06     		lsls	r3, r3, #24
  51 000c FBD5     		bpl	.L2
  24:../codebase/uart_printf.c ****     }
  25:../codebase/uart_printf.c ****     USART2->ICR |= USART_ICR_TCCF;
  52              		.loc 1 25 0
  53 000e 034A     		ldr	r2, .L3
  54 0010 136A     		ldr	r3, [r2, #32]
  55 0012 4021     		movs	r1, #64
  56 0014 0B43     		orrs	r3, r1
  57 0016 1362     		str	r3, [r2, #32]
  26:../codebase/uart_printf.c **** }
  58              		.loc 1 26 0
  59              		@ sp needed
  60 0018 7047     		bx	lr
  61              	.L4:
  62 001a C046     		.align	2
  63              	.L3:
  64 001c 00440040 		.word	1073759232
  65              		.cfi_endproc
  66              	.LFE248:
  68              		.section	.text.printf_callback,"ax",%progbits
  69              		.align	1
  70              		.syntax unified
  71              		.code	16
  72              		.thumb_func
  73              		.fpu softvfp
  75              	printf_callback:
  76              	.LFB249:
  27:../codebase/uart_printf.c **** 
  28:../codebase/uart_printf.c **** static void printf_callback(void * str_end, char ch)
  29:../codebase/uart_printf.c **** {
  77              		.loc 1 29 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc3lmvDm.s 			page 66


  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              	.LVL2:
  82 0000 10B5     		push	{r4, lr}
  83              	.LCFI0:
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 4, -8
  86              		.cfi_offset 14, -4
  30:../codebase/uart_printf.c ****     if((uint32_t)str_end != START_TX)
  87              		.loc 1 30 0
  88 0002 0028     		cmp	r0, #0
  89 0004 00D1     		bne	.L7
  90              	.LVL3:
  91              	.L5:
  31:../codebase/uart_printf.c ****     {
  32:../codebase/uart_printf.c ****         print_char (ch);    
  33:../codebase/uart_printf.c ****     }
  34:../codebase/uart_printf.c **** }
  92              		.loc 1 34 0
  93              		@ sp needed
  94 0006 10BD     		pop	{r4, pc}
  95              	.LVL4:
  96              	.L7:
  32:../codebase/uart_printf.c ****     }
  97              		.loc 1 32 0
  98 0008 0800     		movs	r0, r1
  99              	.LVL5:
 100 000a FFF7FEFF 		bl	print_char
 101              	.LVL6:
 102              		.loc 1 34 0
 103 000e FAE7     		b	.L5
 104              		.cfi_endproc
 105              	.LFE249:
 107              		.section	.text.uart_print_init,"ax",%progbits
 108              		.align	1
 109              		.global	uart_print_init
 110              		.syntax unified
 111              		.code	16
 112              		.thumb_func
 113              		.fpu softvfp
 115              	uart_print_init:
 116              	.LFB250:
  35:../codebase/uart_printf.c **** 
  36:../codebase/uart_printf.c **** void uart_print_init ()
  37:../codebase/uart_printf.c **** {
 117              		.loc 1 37 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121 0000 10B5     		push	{r4, lr}
 122              	.LCFI1:
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 4, -8
 125              		.cfi_offset 14, -4
  38:../codebase/uart_printf.c ****     init_printf((void *) !(START_TX), printf_callback);
 126              		.loc 1 38 0
 127 0002 0249     		ldr	r1, .L9
 128 0004 0120     		movs	r0, #1
ARM GAS  /tmp/cc3lmvDm.s 			page 67


 129 0006 FFF7FEFF 		bl	init_printf
 130              	.LVL7:
  39:../codebase/uart_printf.c **** }
 131              		.loc 1 39 0
 132              		@ sp needed
 133 000a 10BD     		pop	{r4, pc}
 134              	.L10:
 135              		.align	2
 136              	.L9:
 137 000c 00000000 		.word	printf_callback
 138              		.cfi_endproc
 139              	.LFE250:
 141              		.text
 142              	.Letext0:
 143              		.file 3 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_type
 144              		.file 4 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 145              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 146              		.file 6 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l011xx.h"
 147              		.file 7 "../codebase/tinyprintf.h"
ARM GAS  /tmp/cc3lmvDm.s 			page 68


DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart_printf.c
     /tmp/cc3lmvDm.s:16     .text.print_char:0000000000000000 $t
     /tmp/cc3lmvDm.s:22     .text.print_char:0000000000000000 print_char
     /tmp/cc3lmvDm.s:64     .text.print_char:000000000000001c $d
     /tmp/cc3lmvDm.s:69     .text.printf_callback:0000000000000000 $t
     /tmp/cc3lmvDm.s:75     .text.printf_callback:0000000000000000 printf_callback
     /tmp/cc3lmvDm.s:108    .text.uart_print_init:0000000000000000 $t
     /tmp/cc3lmvDm.s:115    .text.uart_print_init:0000000000000000 uart_print_init
     /tmp/cc3lmvDm.s:137    .text.uart_print_init:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
init_printf
