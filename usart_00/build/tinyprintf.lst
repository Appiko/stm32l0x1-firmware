ARM GAS  /tmp/cc5t7vJc.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"tinyprintf.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_lmul
  16              		.global	__aeabi_uldivmod
  17              		.section	.text.ulli2a,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	ulli2a:
  25              	.LFB0:
  26              		.file 1 "../codebase/tinyprintf.c"
   1:../codebase/tinyprintf.c **** /*
   2:../codebase/tinyprintf.c **** Copyright (c) 2004,2012 Kustaa Nyholm / SpareTimeLabs
   3:../codebase/tinyprintf.c **** All rights reserved.
   4:../codebase/tinyprintf.c **** 
   5:../codebase/tinyprintf.c **** Redistribution and use in source and binary forms, with or without
   6:../codebase/tinyprintf.c **** modification, are permitted provided that the following conditions are met:
   7:../codebase/tinyprintf.c ****     * Redistributions of source code must retain the above copyright
   8:../codebase/tinyprintf.c ****       notice, this list of conditions and the following disclaimer.
   9:../codebase/tinyprintf.c ****     * Redistributions in binary form must reproduce the above copyright
  10:../codebase/tinyprintf.c ****       notice, this list of conditions and the following disclaimer in the
  11:../codebase/tinyprintf.c ****       documentation and/or other materials provided with the distribution.
  12:../codebase/tinyprintf.c ****     * Neither the name of Kustaa Nyholm or SpareTimeLabs nor the
  13:../codebase/tinyprintf.c ****       names of its contributors may be used to endorse or promote products
  14:../codebase/tinyprintf.c ****       derived from this software without specific prior written permission.
  15:../codebase/tinyprintf.c **** 
  16:../codebase/tinyprintf.c **** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  17:../codebase/tinyprintf.c **** ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  18:../codebase/tinyprintf.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  19:../codebase/tinyprintf.c **** DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY
  20:../codebase/tinyprintf.c **** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  21:../codebase/tinyprintf.c **** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  22:../codebase/tinyprintf.c **** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  23:../codebase/tinyprintf.c **** ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  24:../codebase/tinyprintf.c **** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  25:../codebase/tinyprintf.c **** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  26:../codebase/tinyprintf.c **** */
  27:../codebase/tinyprintf.c **** 
  28:../codebase/tinyprintf.c **** #include "tinyprintf.h"
  29:../codebase/tinyprintf.c **** 
  30:../codebase/tinyprintf.c **** 
  31:../codebase/tinyprintf.c **** /*
  32:../codebase/tinyprintf.c ****  * Configuration
ARM GAS  /tmp/cc5t7vJc.s 			page 2


  33:../codebase/tinyprintf.c ****  */
  34:../codebase/tinyprintf.c **** 
  35:../codebase/tinyprintf.c **** /* Enable long int support */
  36:../codebase/tinyprintf.c **** #define PRINTF_LONG_SUPPORT
  37:../codebase/tinyprintf.c **** 
  38:../codebase/tinyprintf.c **** /* Enable long long int support (implies long int support) */
  39:../codebase/tinyprintf.c **** #define PRINTF_LONG_LONG_SUPPORT
  40:../codebase/tinyprintf.c **** 
  41:../codebase/tinyprintf.c **** /* Enable %z (size_t) support */
  42:../codebase/tinyprintf.c **** #define PRINTF_SIZE_T_SUPPORT
  43:../codebase/tinyprintf.c **** 
  44:../codebase/tinyprintf.c **** /*
  45:../codebase/tinyprintf.c ****  * Configuration adjustments
  46:../codebase/tinyprintf.c ****  */
  47:../codebase/tinyprintf.c **** #ifdef PRINTF_SIZE_T_SUPPORT
  48:../codebase/tinyprintf.c **** #include <sys/types.h>
  49:../codebase/tinyprintf.c **** #endif
  50:../codebase/tinyprintf.c **** 
  51:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_LONG_SUPPORT
  52:../codebase/tinyprintf.c **** # define PRINTF_LONG_SUPPORT
  53:../codebase/tinyprintf.c **** #endif
  54:../codebase/tinyprintf.c **** 
  55:../codebase/tinyprintf.c **** /* __SIZEOF_<type>__ defined at least by gcc */
  56:../codebase/tinyprintf.c **** #ifdef __SIZEOF_POINTER__
  57:../codebase/tinyprintf.c **** # define SIZEOF_POINTER __SIZEOF_POINTER__
  58:../codebase/tinyprintf.c **** #endif
  59:../codebase/tinyprintf.c **** #ifdef __SIZEOF_LONG_LONG__
  60:../codebase/tinyprintf.c **** # define SIZEOF_LONG_LONG __SIZEOF_LONG_LONG__
  61:../codebase/tinyprintf.c **** #endif
  62:../codebase/tinyprintf.c **** #ifdef __SIZEOF_LONG__
  63:../codebase/tinyprintf.c **** # define SIZEOF_LONG __SIZEOF_LONG__
  64:../codebase/tinyprintf.c **** #endif
  65:../codebase/tinyprintf.c **** #ifdef __SIZEOF_INT__
  66:../codebase/tinyprintf.c **** # define SIZEOF_INT __SIZEOF_INT__
  67:../codebase/tinyprintf.c **** #endif
  68:../codebase/tinyprintf.c **** 
  69:../codebase/tinyprintf.c **** #ifdef __GNUC__
  70:../codebase/tinyprintf.c **** # define _TFP_GCC_NO_INLINE_  __attribute__ ((noinline))
  71:../codebase/tinyprintf.c **** #else
  72:../codebase/tinyprintf.c **** # define _TFP_GCC_NO_INLINE_
  73:../codebase/tinyprintf.c **** #endif
  74:../codebase/tinyprintf.c **** 
  75:../codebase/tinyprintf.c **** /*
  76:../codebase/tinyprintf.c ****  * Implementation
  77:../codebase/tinyprintf.c ****  */
  78:../codebase/tinyprintf.c **** struct param {
  79:../codebase/tinyprintf.c ****     char lz:1;          /**<  Leading zeros */
  80:../codebase/tinyprintf.c ****     char alt:1;         /**<  alternate form */
  81:../codebase/tinyprintf.c ****     char uc:1;          /**<  Upper case (for base16 only) */
  82:../codebase/tinyprintf.c ****     char align_left:1;  /**<  0 == align right (default), 1 == align left */
  83:../codebase/tinyprintf.c ****     unsigned int width; /**<  field width */
  84:../codebase/tinyprintf.c ****     char sign;          /**<  The sign to display (if any) */
  85:../codebase/tinyprintf.c ****     unsigned int base;  /**<  number base (e.g.: 8, 10, 16) */
  86:../codebase/tinyprintf.c ****     char *bf;           /**<  Buffer to output */
  87:../codebase/tinyprintf.c **** };
  88:../codebase/tinyprintf.c **** 
  89:../codebase/tinyprintf.c **** 
ARM GAS  /tmp/cc5t7vJc.s 			page 3


  90:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_LONG_SUPPORT
  91:../codebase/tinyprintf.c **** static void _TFP_GCC_NO_INLINE_ ulli2a(
  92:../codebase/tinyprintf.c ****     unsigned long long int num, struct param *p)
  93:../codebase/tinyprintf.c **** {
  27              		.loc 1 93 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 D646     		mov	lr, r10
  41 0004 4F46     		mov	r7, r9
  42 0006 4646     		mov	r6, r8
  43 0008 C0B5     		push	{r6, r7, lr}
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 32
  46              		.cfi_offset 8, -32
  47              		.cfi_offset 9, -28
  48              		.cfi_offset 10, -24
  49 000a 82B0     		sub	sp, sp, #8
  50              	.LCFI2:
  51              		.cfi_def_cfa_offset 40
  52 000c 0090     		str	r0, [sp]
  53 000e 0191     		str	r1, [sp, #4]
  54 0010 9146     		mov	r9, r2
  55              	.LVL1:
  94:../codebase/tinyprintf.c ****     int n = 0;
  95:../codebase/tinyprintf.c ****     unsigned long long int d = 1;
  96:../codebase/tinyprintf.c ****     char *bf = p->bf;
  56              		.loc 1 96 0
  57 0012 1769     		ldr	r7, [r2, #16]
  58              	.LVL2:
  95:../codebase/tinyprintf.c ****     char *bf = p->bf;
  59              		.loc 1 95 0
  60 0014 0124     		movs	r4, #1
  61 0016 0025     		movs	r5, #0
  97:../codebase/tinyprintf.c ****     while (num / d >= p->base)
  62              		.loc 1 97 0
  63 0018 06E0     		b	.L2
  64              	.LVL3:
  65              	.L3:
  98:../codebase/tinyprintf.c ****         d *= p->base;
  66              		.loc 1 98 0
  67 001a 0023     		movs	r3, #0
  68              	.LVL4:
  69 001c 2000     		movs	r0, r4
  70 001e 2900     		movs	r1, r5
  71 0020 FFF7FEFF 		bl	__aeabi_lmul
  72              	.LVL5:
  73 0024 0400     		movs	r4, r0
ARM GAS  /tmp/cc5t7vJc.s 			page 4


  74              	.LVL6:
  75 0026 0D00     		movs	r5, r1
  76              	.LVL7:
  77              	.L2:
  97:../codebase/tinyprintf.c ****     while (num / d >= p->base)
  78              		.loc 1 97 0
  79 0028 2200     		movs	r2, r4
  80 002a 2B00     		movs	r3, r5
  81 002c 0098     		ldr	r0, [sp]
  82 002e 0199     		ldr	r1, [sp, #4]
  83 0030 FFF7FEFF 		bl	__aeabi_uldivmod
  84              	.LVL8:
  85 0034 4B46     		mov	r3, r9
  86 0036 DA68     		ldr	r2, [r3, #12]
  87 0038 0029     		cmp	r1, #0
  88 003a EED1     		bne	.L3
  89              	.LVL9:
  90 003c 8242     		cmp	r2, r0
  91 003e ECD9     		bls	.L3
  92 0040 0023     		movs	r3, #0
  93              	.LVL10:
  94 0042 9846     		mov	r8, r3
  95 0044 0AE0     		b	.L5
  96              	.LVL11:
  97              	.L14:
  98              	.LBB2:
  99:../codebase/tinyprintf.c ****     while (d != 0) {
 100:../codebase/tinyprintf.c ****         int dgt = num / d;
 101:../codebase/tinyprintf.c ****         num %= d;
 102:../codebase/tinyprintf.c ****         d /= p->base;
 103:../codebase/tinyprintf.c ****         if (n || dgt > 0 || d == 0) {
  99              		.loc 1 103 0 discriminator 2
 100 0046 0B00     		movs	r3, r1
 101              	.LVL12:
 102 0048 0343     		orrs	r3, r0
 103 004a 07D1     		bne	.L5
 104 004c 27E0     		b	.L6
 105              	.LVL13:
 106              	.L10:
 104:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 107              		.loc 1 104 0
 108 004e 3023     		movs	r3, #48
 109              	.LVL14:
 110              	.L8:
 111              		.loc 1 104 0 is_stmt 0 discriminator 8
 112 0050 9E19     		adds	r6, r3, r6
 113              	.LVL15:
 114 0052 3E70     		strb	r6, [r7]
 105:../codebase/tinyprintf.c ****             ++n;
 115              		.loc 1 105 0 is_stmt 1 discriminator 8
 116 0054 0123     		movs	r3, #1
 117 0056 9C46     		mov	ip, r3
 118 0058 E044     		add	r8, r8, ip
 119              	.LVL16:
 104:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 120              		.loc 1 104 0 discriminator 8
 121 005a 1700     		movs	r7, r2
ARM GAS  /tmp/cc5t7vJc.s 			page 5


 122              	.LVL17:
 123              	.L5:
 124              	.LBE2:
  99:../codebase/tinyprintf.c ****     while (d != 0) {
 125              		.loc 1 99 0
 126 005c 2300     		movs	r3, r4
 127 005e 2B43     		orrs	r3, r5
 128 0060 29D0     		beq	.L13
 129              	.LBB3:
 100:../codebase/tinyprintf.c ****         num %= d;
 130              		.loc 1 100 0
 131 0062 2200     		movs	r2, r4
 132 0064 2B00     		movs	r3, r5
 133 0066 0098     		ldr	r0, [sp]
 134 0068 0199     		ldr	r1, [sp, #4]
 135 006a FFF7FEFF 		bl	__aeabi_uldivmod
 136              	.LVL18:
 137 006e 0600     		movs	r6, r0
 138 0070 8246     		mov	r10, r0
 139              	.LVL19:
 101:../codebase/tinyprintf.c ****         d /= p->base;
 140              		.loc 1 101 0
 141 0072 2200     		movs	r2, r4
 142 0074 2B00     		movs	r3, r5
 143 0076 0098     		ldr	r0, [sp]
 144 0078 0199     		ldr	r1, [sp, #4]
 145              	.LVL20:
 146 007a FFF7FEFF 		bl	__aeabi_uldivmod
 147              	.LVL21:
 148 007e 0092     		str	r2, [sp]
 149 0080 0193     		str	r3, [sp, #4]
 150              	.LVL22:
 102:../codebase/tinyprintf.c ****         if (n || dgt > 0 || d == 0) {
 151              		.loc 1 102 0
 152 0082 4B46     		mov	r3, r9
 153 0084 DA68     		ldr	r2, [r3, #12]
 154              	.LVL23:
 155 0086 0023     		movs	r3, #0
 156 0088 2000     		movs	r0, r4
 157 008a 2900     		movs	r1, r5
 158 008c FFF7FEFF 		bl	__aeabi_uldivmod
 159              	.LVL24:
 160 0090 0400     		movs	r4, r0
 161              	.LVL25:
 162 0092 0D00     		movs	r5, r1
 163              	.LVL26:
 103:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 164              		.loc 1 103 0
 165 0094 4346     		mov	r3, r8
 166 0096 002B     		cmp	r3, #0
 167 0098 01D1     		bne	.L6
 103:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 168              		.loc 1 103 0 is_stmt 0 discriminator 1
 169 009a 002E     		cmp	r6, #0
 170 009c D3DD     		ble	.L14
 171              	.L6:
 104:../codebase/tinyprintf.c ****             ++n;
ARM GAS  /tmp/cc5t7vJc.s 			page 6


 172              		.loc 1 104 0 is_stmt 1
 173 009e 7A1C     		adds	r2, r7, #1
 174              	.LVL27:
 175 00a0 5346     		mov	r3, r10
 176 00a2 092B     		cmp	r3, #9
 177 00a4 D3DD     		ble	.L10
 178              	.LVL28:
 104:../codebase/tinyprintf.c ****             ++n;
 179              		.loc 1 104 0 is_stmt 0 discriminator 1
 180 00a6 4B46     		mov	r3, r9
 181              	.LVL29:
 182 00a8 1B78     		ldrb	r3, [r3]
 183 00aa 5B07     		lsls	r3, r3, #29
 184 00ac 01D5     		bpl	.L11
 104:../codebase/tinyprintf.c ****             ++n;
 185              		.loc 1 104 0
 186 00ae 3723     		movs	r3, #55
 187 00b0 CEE7     		b	.L8
 188              	.L11:
 189 00b2 5723     		movs	r3, #87
 190 00b4 CCE7     		b	.L8
 191              	.LVL30:
 192              	.L13:
 193              	.LBE3:
 106:../codebase/tinyprintf.c ****         }
 107:../codebase/tinyprintf.c ****     }
 108:../codebase/tinyprintf.c ****     *bf = 0;
 194              		.loc 1 108 0 is_stmt 1
 195 00b6 3B70     		strb	r3, [r7]
 109:../codebase/tinyprintf.c **** }
 196              		.loc 1 109 0
 197 00b8 02B0     		add	sp, sp, #8
 198              	.LVL31:
 199              		@ sp needed
 200              	.LVL32:
 201              	.LVL33:
 202              	.LVL34:
 203              	.LVL35:
 204 00ba 1CBC     		pop	{r2, r3, r4}
 205 00bc 9046     		mov	r8, r2
 206 00be 9946     		mov	r9, r3
 207 00c0 A246     		mov	r10, r4
 208 00c2 F0BD     		pop	{r4, r5, r6, r7, pc}
 209              		.cfi_endproc
 210              	.LFE0:
 212              		.section	.text.lli2a,"ax",%progbits
 213              		.align	1
 214              		.syntax unified
 215              		.code	16
 216              		.thumb_func
 217              		.fpu softvfp
 219              	lli2a:
 220              	.LFB1:
 110:../codebase/tinyprintf.c **** 
 111:../codebase/tinyprintf.c **** static void lli2a(long long int num, struct param *p)
 112:../codebase/tinyprintf.c **** {
 221              		.loc 1 112 0
ARM GAS  /tmp/cc5t7vJc.s 			page 7


 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL36:
 226 0000 10B5     		push	{r4, lr}
 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 4, -8
 230              		.cfi_offset 14, -4
 113:../codebase/tinyprintf.c ****     if (num < 0) {
 231              		.loc 1 113 0
 232 0002 0029     		cmp	r1, #0
 233 0004 06DA     		bge	.L16
 114:../codebase/tinyprintf.c ****         num = -num;
 234              		.loc 1 114 0
 235 0006 0300     		movs	r3, r0
 236 0008 0C00     		movs	r4, r1
 237 000a 0021     		movs	r1, #0
 238 000c 5842     		rsbs	r0, r3, #0
 239 000e A141     		sbcs	r1, r4
 240              	.LVL37:
 115:../codebase/tinyprintf.c ****         p->sign = '-';
 241              		.loc 1 115 0
 242 0010 2D23     		movs	r3, #45
 243 0012 1372     		strb	r3, [r2, #8]
 244              	.L16:
 116:../codebase/tinyprintf.c ****     }
 117:../codebase/tinyprintf.c ****     ulli2a(num, p);
 245              		.loc 1 117 0
 246 0014 FFF7FEFF 		bl	ulli2a
 247              	.LVL38:
 118:../codebase/tinyprintf.c **** }
 248              		.loc 1 118 0
 249              		@ sp needed
 250 0018 10BD     		pop	{r4, pc}
 251              		.cfi_endproc
 252              	.LFE1:
 254              		.global	__aeabi_uidiv
 255              		.global	__aeabi_uidivmod
 256              		.section	.text.uli2a,"ax",%progbits
 257              		.align	1
 258              		.syntax unified
 259              		.code	16
 260              		.thumb_func
 261              		.fpu softvfp
 263              	uli2a:
 264              	.LFB2:
 119:../codebase/tinyprintf.c **** #endif
 120:../codebase/tinyprintf.c **** 
 121:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 122:../codebase/tinyprintf.c **** static void uli2a(unsigned long int num, struct param *p)
 123:../codebase/tinyprintf.c **** {
 265              		.loc 1 123 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              	.LVL39:
ARM GAS  /tmp/cc5t7vJc.s 			page 8


 270 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 271              	.LCFI4:
 272              		.cfi_def_cfa_offset 20
 273              		.cfi_offset 4, -20
 274              		.cfi_offset 5, -16
 275              		.cfi_offset 6, -12
 276              		.cfi_offset 7, -8
 277              		.cfi_offset 14, -4
 278 0002 D646     		mov	lr, r10
 279 0004 00B5     		push	{lr}
 280              	.LCFI5:
 281              		.cfi_def_cfa_offset 24
 282              		.cfi_offset 10, -24
 283 0006 82B0     		sub	sp, sp, #8
 284              	.LCFI6:
 285              		.cfi_def_cfa_offset 32
 286 0008 0090     		str	r0, [sp]
 287 000a 0E00     		movs	r6, r1
 288              	.LVL40:
 124:../codebase/tinyprintf.c ****     int n = 0;
 125:../codebase/tinyprintf.c ****     unsigned long int d = 1;
 126:../codebase/tinyprintf.c ****     char *bf = p->bf;
 289              		.loc 1 126 0
 290 000c 0F69     		ldr	r7, [r1, #16]
 291              	.LVL41:
 125:../codebase/tinyprintf.c ****     char *bf = p->bf;
 292              		.loc 1 125 0
 293 000e 0124     		movs	r4, #1
 127:../codebase/tinyprintf.c ****     while (num / d >= p->base)
 294              		.loc 1 127 0
 295 0010 00E0     		b	.L19
 296              	.LVL42:
 297              	.L20:
 128:../codebase/tinyprintf.c ****         d *= p->base;
 298              		.loc 1 128 0
 299 0012 5C43     		muls	r4, r3
 300              	.LVL43:
 301              	.L19:
 127:../codebase/tinyprintf.c ****     while (num / d >= p->base)
 302              		.loc 1 127 0
 303 0014 2100     		movs	r1, r4
 304 0016 0098     		ldr	r0, [sp]
 305 0018 FFF7FEFF 		bl	__aeabi_uidiv
 306              	.LVL44:
 307 001c F368     		ldr	r3, [r6, #12]
 308 001e 9842     		cmp	r0, r3
 309 0020 F7D2     		bcs	.L20
 310 0022 0025     		movs	r5, #0
 311 0024 09E0     		b	.L21
 312              	.LVL45:
 313              	.L29:
 314              	.LBB4:
 129:../codebase/tinyprintf.c ****     while (d != 0) {
 130:../codebase/tinyprintf.c ****         int dgt = num / d;
 131:../codebase/tinyprintf.c ****         num %= d;
 132:../codebase/tinyprintf.c ****         d /= p->base;
 133:../codebase/tinyprintf.c ****         if (n || dgt > 0 || d == 0) {
ARM GAS  /tmp/cc5t7vJc.s 			page 9


 315              		.loc 1 133 0 discriminator 2
 316 0026 0028     		cmp	r0, #0
 317 0028 07D1     		bne	.L21
 318 002a 1DE0     		b	.L22
 319              	.LVL46:
 320              	.L26:
 134:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 321              		.loc 1 134 0
 322 002c 3020     		movs	r0, #48
 323              	.LVL47:
 324              	.L24:
 325              		.loc 1 134 0 is_stmt 0 discriminator 8
 326 002e 019A     		ldr	r2, [sp, #4]
 327 0030 9446     		mov	ip, r2
 328 0032 6044     		add	r0, r0, ip
 329 0034 3870     		strb	r0, [r7]
 135:../codebase/tinyprintf.c ****             ++n;
 330              		.loc 1 135 0 is_stmt 1 discriminator 8
 331 0036 0135     		adds	r5, r5, #1
 332              	.LVL48:
 134:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 333              		.loc 1 134 0 discriminator 8
 334 0038 1F00     		movs	r7, r3
 335              	.LVL49:
 336              	.L21:
 337              	.LBE4:
 129:../codebase/tinyprintf.c ****     while (d != 0) {
 338              		.loc 1 129 0
 339 003a 002C     		cmp	r4, #0
 340 003c 1FD0     		beq	.L28
 341              	.LBB5:
 130:../codebase/tinyprintf.c ****         num %= d;
 342              		.loc 1 130 0
 343 003e 2100     		movs	r1, r4
 344 0040 0098     		ldr	r0, [sp]
 345 0042 FFF7FEFF 		bl	__aeabi_uidiv
 346              	.LVL50:
 347 0046 0190     		str	r0, [sp, #4]
 348 0048 8246     		mov	r10, r0
 349              	.LVL51:
 131:../codebase/tinyprintf.c ****         d /= p->base;
 350              		.loc 1 131 0
 351 004a 2100     		movs	r1, r4
 352 004c 0098     		ldr	r0, [sp]
 353              	.LVL52:
 354 004e FFF7FEFF 		bl	__aeabi_uidivmod
 355              	.LVL53:
 356 0052 0091     		str	r1, [sp]
 357              	.LVL54:
 132:../codebase/tinyprintf.c ****         if (n || dgt > 0 || d == 0) {
 358              		.loc 1 132 0
 359 0054 F168     		ldr	r1, [r6, #12]
 360              	.LVL55:
 361 0056 2000     		movs	r0, r4
 362 0058 FFF7FEFF 		bl	__aeabi_uidiv
 363              	.LVL56:
 364 005c 0400     		movs	r4, r0
ARM GAS  /tmp/cc5t7vJc.s 			page 10


 365              	.LVL57:
 133:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 366              		.loc 1 133 0
 367 005e 002D     		cmp	r5, #0
 368 0060 02D1     		bne	.L22
 133:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 369              		.loc 1 133 0 is_stmt 0 discriminator 1
 370 0062 5346     		mov	r3, r10
 371 0064 002B     		cmp	r3, #0
 372 0066 DEDD     		ble	.L29
 373              	.L22:
 134:../codebase/tinyprintf.c ****             ++n;
 374              		.loc 1 134 0 is_stmt 1
 375 0068 7B1C     		adds	r3, r7, #1
 376              	.LVL58:
 377 006a 5246     		mov	r2, r10
 378 006c 092A     		cmp	r2, #9
 379 006e DDDD     		ble	.L26
 380              	.LVL59:
 134:../codebase/tinyprintf.c ****             ++n;
 381              		.loc 1 134 0 is_stmt 0 discriminator 1
 382 0070 3278     		ldrb	r2, [r6]
 383              	.LVL60:
 384 0072 5207     		lsls	r2, r2, #29
 385 0074 01D5     		bpl	.L27
 134:../codebase/tinyprintf.c ****             ++n;
 386              		.loc 1 134 0
 387 0076 3720     		movs	r0, #55
 388              	.LVL61:
 389 0078 D9E7     		b	.L24
 390              	.LVL62:
 391              	.L27:
 392 007a 5720     		movs	r0, #87
 393              	.LVL63:
 394 007c D7E7     		b	.L24
 395              	.LVL64:
 396              	.L28:
 397              	.LBE5:
 136:../codebase/tinyprintf.c ****         }
 137:../codebase/tinyprintf.c ****     }
 138:../codebase/tinyprintf.c ****     *bf = 0;
 398              		.loc 1 138 0 is_stmt 1
 399 007e 0023     		movs	r3, #0
 400 0080 3B70     		strb	r3, [r7]
 139:../codebase/tinyprintf.c **** }
 401              		.loc 1 139 0
 402 0082 02B0     		add	sp, sp, #8
 403              	.LVL65:
 404              		@ sp needed
 405              	.LVL66:
 406              	.LVL67:
 407              	.LVL68:
 408              	.LVL69:
 409 0084 04BC     		pop	{r2}
 410 0086 9246     		mov	r10, r2
 411 0088 F0BD     		pop	{r4, r5, r6, r7, pc}
 412              		.cfi_endproc
ARM GAS  /tmp/cc5t7vJc.s 			page 11


 413              	.LFE2:
 415              		.section	.text.li2a,"ax",%progbits
 416              		.align	1
 417              		.syntax unified
 418              		.code	16
 419              		.thumb_func
 420              		.fpu softvfp
 422              	li2a:
 423              	.LFB3:
 140:../codebase/tinyprintf.c **** 
 141:../codebase/tinyprintf.c **** static void li2a(long num, struct param *p)
 142:../codebase/tinyprintf.c **** {
 424              		.loc 1 142 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 0
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428              	.LVL70:
 429 0000 10B5     		push	{r4, lr}
 430              	.LCFI7:
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 4, -8
 433              		.cfi_offset 14, -4
 143:../codebase/tinyprintf.c ****     if (num < 0) {
 434              		.loc 1 143 0
 435 0002 0028     		cmp	r0, #0
 436 0004 02DB     		blt	.L32
 437              	.L31:
 144:../codebase/tinyprintf.c ****         num = -num;
 145:../codebase/tinyprintf.c ****         p->sign = '-';
 146:../codebase/tinyprintf.c ****     }
 147:../codebase/tinyprintf.c ****     uli2a(num, p);
 438              		.loc 1 147 0
 439 0006 FFF7FEFF 		bl	uli2a
 440              	.LVL71:
 148:../codebase/tinyprintf.c **** }
 441              		.loc 1 148 0
 442              		@ sp needed
 443 000a 10BD     		pop	{r4, pc}
 444              	.LVL72:
 445              	.L32:
 144:../codebase/tinyprintf.c ****         num = -num;
 446              		.loc 1 144 0
 447 000c 4042     		rsbs	r0, r0, #0
 448              	.LVL73:
 145:../codebase/tinyprintf.c ****     }
 449              		.loc 1 145 0
 450 000e 2D23     		movs	r3, #45
 451 0010 0B72     		strb	r3, [r1, #8]
 452 0012 F8E7     		b	.L31
 453              		.cfi_endproc
 454              	.LFE3:
 456              		.section	.text.ui2a,"ax",%progbits
 457              		.align	1
 458              		.syntax unified
 459              		.code	16
 460              		.thumb_func
 461              		.fpu softvfp
ARM GAS  /tmp/cc5t7vJc.s 			page 12


 463              	ui2a:
 464              	.LFB4:
 149:../codebase/tinyprintf.c **** #endif
 150:../codebase/tinyprintf.c **** 
 151:../codebase/tinyprintf.c **** static void ui2a(unsigned int num, struct param *p)
 152:../codebase/tinyprintf.c **** {
 465              		.loc 1 152 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 8
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              	.LVL74:
 470 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 471              	.LCFI8:
 472              		.cfi_def_cfa_offset 20
 473              		.cfi_offset 4, -20
 474              		.cfi_offset 5, -16
 475              		.cfi_offset 6, -12
 476              		.cfi_offset 7, -8
 477              		.cfi_offset 14, -4
 478 0002 D646     		mov	lr, r10
 479 0004 00B5     		push	{lr}
 480              	.LCFI9:
 481              		.cfi_def_cfa_offset 24
 482              		.cfi_offset 10, -24
 483 0006 82B0     		sub	sp, sp, #8
 484              	.LCFI10:
 485              		.cfi_def_cfa_offset 32
 486 0008 0090     		str	r0, [sp]
 487 000a 0E00     		movs	r6, r1
 488              	.LVL75:
 153:../codebase/tinyprintf.c ****     int n = 0;
 154:../codebase/tinyprintf.c ****     unsigned int d = 1;
 155:../codebase/tinyprintf.c ****     char *bf = p->bf;
 489              		.loc 1 155 0
 490 000c 0F69     		ldr	r7, [r1, #16]
 491              	.LVL76:
 154:../codebase/tinyprintf.c ****     char *bf = p->bf;
 492              		.loc 1 154 0
 493 000e 0124     		movs	r4, #1
 156:../codebase/tinyprintf.c ****     while (num / d >= p->base)
 494              		.loc 1 156 0
 495 0010 00E0     		b	.L34
 496              	.LVL77:
 497              	.L35:
 157:../codebase/tinyprintf.c ****         d *= p->base;
 498              		.loc 1 157 0
 499 0012 5C43     		muls	r4, r3
 500              	.LVL78:
 501              	.L34:
 156:../codebase/tinyprintf.c ****     while (num / d >= p->base)
 502              		.loc 1 156 0
 503 0014 2100     		movs	r1, r4
 504 0016 0098     		ldr	r0, [sp]
 505 0018 FFF7FEFF 		bl	__aeabi_uidiv
 506              	.LVL79:
 507 001c F368     		ldr	r3, [r6, #12]
 508 001e 9842     		cmp	r0, r3
ARM GAS  /tmp/cc5t7vJc.s 			page 13


 509 0020 F7D2     		bcs	.L35
 510 0022 0025     		movs	r5, #0
 511 0024 09E0     		b	.L36
 512              	.LVL80:
 513              	.L44:
 514              	.LBB6:
 158:../codebase/tinyprintf.c ****     while (d != 0) {
 159:../codebase/tinyprintf.c ****         int dgt = num / d;
 160:../codebase/tinyprintf.c ****         num %= d;
 161:../codebase/tinyprintf.c ****         d /= p->base;
 162:../codebase/tinyprintf.c ****         if (n || dgt > 0 || d == 0) {
 515              		.loc 1 162 0 discriminator 2
 516 0026 0028     		cmp	r0, #0
 517 0028 07D1     		bne	.L36
 518 002a 1DE0     		b	.L37
 519              	.LVL81:
 520              	.L41:
 163:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 521              		.loc 1 163 0
 522 002c 3020     		movs	r0, #48
 523              	.LVL82:
 524              	.L39:
 525              		.loc 1 163 0 is_stmt 0 discriminator 8
 526 002e 019A     		ldr	r2, [sp, #4]
 527 0030 9446     		mov	ip, r2
 528 0032 6044     		add	r0, r0, ip
 529 0034 3870     		strb	r0, [r7]
 164:../codebase/tinyprintf.c ****             ++n;
 530              		.loc 1 164 0 is_stmt 1 discriminator 8
 531 0036 0135     		adds	r5, r5, #1
 532              	.LVL83:
 163:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 533              		.loc 1 163 0 discriminator 8
 534 0038 1F00     		movs	r7, r3
 535              	.LVL84:
 536              	.L36:
 537              	.LBE6:
 158:../codebase/tinyprintf.c ****     while (d != 0) {
 538              		.loc 1 158 0
 539 003a 002C     		cmp	r4, #0
 540 003c 1FD0     		beq	.L43
 541              	.LBB7:
 159:../codebase/tinyprintf.c ****         num %= d;
 542              		.loc 1 159 0
 543 003e 2100     		movs	r1, r4
 544 0040 0098     		ldr	r0, [sp]
 545 0042 FFF7FEFF 		bl	__aeabi_uidiv
 546              	.LVL85:
 547 0046 0190     		str	r0, [sp, #4]
 548 0048 8246     		mov	r10, r0
 549              	.LVL86:
 160:../codebase/tinyprintf.c ****         d /= p->base;
 550              		.loc 1 160 0
 551 004a 2100     		movs	r1, r4
 552 004c 0098     		ldr	r0, [sp]
 553              	.LVL87:
 554 004e FFF7FEFF 		bl	__aeabi_uidivmod
ARM GAS  /tmp/cc5t7vJc.s 			page 14


 555              	.LVL88:
 556 0052 0091     		str	r1, [sp]
 557              	.LVL89:
 161:../codebase/tinyprintf.c ****         if (n || dgt > 0 || d == 0) {
 558              		.loc 1 161 0
 559 0054 F168     		ldr	r1, [r6, #12]
 560              	.LVL90:
 561 0056 2000     		movs	r0, r4
 562 0058 FFF7FEFF 		bl	__aeabi_uidiv
 563              	.LVL91:
 564 005c 0400     		movs	r4, r0
 565              	.LVL92:
 162:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 566              		.loc 1 162 0
 567 005e 002D     		cmp	r5, #0
 568 0060 02D1     		bne	.L37
 162:../codebase/tinyprintf.c ****             *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 569              		.loc 1 162 0 is_stmt 0 discriminator 1
 570 0062 5346     		mov	r3, r10
 571 0064 002B     		cmp	r3, #0
 572 0066 DEDD     		ble	.L44
 573              	.L37:
 163:../codebase/tinyprintf.c ****             ++n;
 574              		.loc 1 163 0 is_stmt 1
 575 0068 7B1C     		adds	r3, r7, #1
 576              	.LVL93:
 577 006a 5246     		mov	r2, r10
 578 006c 092A     		cmp	r2, #9
 579 006e DDDD     		ble	.L41
 580              	.LVL94:
 163:../codebase/tinyprintf.c ****             ++n;
 581              		.loc 1 163 0 is_stmt 0 discriminator 1
 582 0070 3278     		ldrb	r2, [r6]
 583              	.LVL95:
 584 0072 5207     		lsls	r2, r2, #29
 585 0074 01D5     		bpl	.L42
 163:../codebase/tinyprintf.c ****             ++n;
 586              		.loc 1 163 0
 587 0076 3720     		movs	r0, #55
 588              	.LVL96:
 589 0078 D9E7     		b	.L39
 590              	.LVL97:
 591              	.L42:
 592 007a 5720     		movs	r0, #87
 593              	.LVL98:
 594 007c D7E7     		b	.L39
 595              	.LVL99:
 596              	.L43:
 597              	.LBE7:
 165:../codebase/tinyprintf.c ****         }
 166:../codebase/tinyprintf.c ****     }
 167:../codebase/tinyprintf.c ****     *bf = 0;
 598              		.loc 1 167 0 is_stmt 1
 599 007e 0023     		movs	r3, #0
 600 0080 3B70     		strb	r3, [r7]
 168:../codebase/tinyprintf.c **** }
 601              		.loc 1 168 0
ARM GAS  /tmp/cc5t7vJc.s 			page 15


 602 0082 02B0     		add	sp, sp, #8
 603              	.LVL100:
 604              		@ sp needed
 605              	.LVL101:
 606              	.LVL102:
 607              	.LVL103:
 608              	.LVL104:
 609 0084 04BC     		pop	{r2}
 610 0086 9246     		mov	r10, r2
 611 0088 F0BD     		pop	{r4, r5, r6, r7, pc}
 612              		.cfi_endproc
 613              	.LFE4:
 615              		.section	.text.i2a,"ax",%progbits
 616              		.align	1
 617              		.syntax unified
 618              		.code	16
 619              		.thumb_func
 620              		.fpu softvfp
 622              	i2a:
 623              	.LFB5:
 169:../codebase/tinyprintf.c **** 
 170:../codebase/tinyprintf.c **** static void i2a(int num, struct param *p)
 171:../codebase/tinyprintf.c **** {
 624              		.loc 1 171 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              	.LVL105:
 629 0000 10B5     		push	{r4, lr}
 630              	.LCFI11:
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 4, -8
 633              		.cfi_offset 14, -4
 172:../codebase/tinyprintf.c ****     if (num < 0) {
 634              		.loc 1 172 0
 635 0002 0028     		cmp	r0, #0
 636 0004 02DB     		blt	.L47
 637              	.L46:
 173:../codebase/tinyprintf.c ****         num = -num;
 174:../codebase/tinyprintf.c ****         p->sign = '-';
 175:../codebase/tinyprintf.c ****     }
 176:../codebase/tinyprintf.c ****     ui2a(num, p);
 638              		.loc 1 176 0
 639 0006 FFF7FEFF 		bl	ui2a
 640              	.LVL106:
 177:../codebase/tinyprintf.c **** }
 641              		.loc 1 177 0
 642              		@ sp needed
 643 000a 10BD     		pop	{r4, pc}
 644              	.LVL107:
 645              	.L47:
 173:../codebase/tinyprintf.c ****         num = -num;
 646              		.loc 1 173 0
 647 000c 4042     		rsbs	r0, r0, #0
 648              	.LVL108:
 174:../codebase/tinyprintf.c ****     }
 649              		.loc 1 174 0
ARM GAS  /tmp/cc5t7vJc.s 			page 16


 650 000e 2D23     		movs	r3, #45
 651 0010 0B72     		strb	r3, [r1, #8]
 652 0012 F8E7     		b	.L46
 653              		.cfi_endproc
 654              	.LFE5:
 656              		.section	.text.a2d,"ax",%progbits
 657              		.align	1
 658              		.syntax unified
 659              		.code	16
 660              		.thumb_func
 661              		.fpu softvfp
 663              	a2d:
 664              	.LFB6:
 178:../codebase/tinyprintf.c **** 
 179:../codebase/tinyprintf.c **** static int a2d(char ch)
 180:../codebase/tinyprintf.c **** {
 665              		.loc 1 180 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670              	.LVL109:
 181:../codebase/tinyprintf.c ****     if (ch >= '0' && ch <= '9')
 671              		.loc 1 181 0
 672 0000 0300     		movs	r3, r0
 673 0002 303B     		subs	r3, r3, #48
 674 0004 DBB2     		uxtb	r3, r3
 675 0006 092B     		cmp	r3, #9
 676 0008 0BD9     		bls	.L53
 182:../codebase/tinyprintf.c ****         return ch - '0';
 183:../codebase/tinyprintf.c ****     else if (ch >= 'a' && ch <= 'f')
 677              		.loc 1 183 0
 678 000a 0300     		movs	r3, r0
 679 000c 613B     		subs	r3, r3, #97
 680 000e DBB2     		uxtb	r3, r3
 681 0010 052B     		cmp	r3, #5
 682 0012 08D9     		bls	.L54
 184:../codebase/tinyprintf.c ****         return ch - 'a' + 10;
 185:../codebase/tinyprintf.c ****     else if (ch >= 'A' && ch <= 'F')
 683              		.loc 1 185 0
 684 0014 0300     		movs	r3, r0
 685 0016 413B     		subs	r3, r3, #65
 686 0018 DBB2     		uxtb	r3, r3
 687 001a 052B     		cmp	r3, #5
 688 001c 05D8     		bhi	.L52
 186:../codebase/tinyprintf.c ****         return ch - 'A' + 10;
 689              		.loc 1 186 0
 690 001e 3738     		subs	r0, r0, #55
 691              	.LVL110:
 692 0020 00E0     		b	.L48
 693              	.LVL111:
 694              	.L53:
 182:../codebase/tinyprintf.c ****         return ch - '0';
 695              		.loc 1 182 0
 696 0022 3038     		subs	r0, r0, #48
 697              	.LVL112:
 698              	.L48:
ARM GAS  /tmp/cc5t7vJc.s 			page 17


 187:../codebase/tinyprintf.c ****     else
 188:../codebase/tinyprintf.c ****         return -1;
 189:../codebase/tinyprintf.c **** }
 699              		.loc 1 189 0
 700              		@ sp needed
 701 0024 7047     		bx	lr
 702              	.LVL113:
 703              	.L54:
 184:../codebase/tinyprintf.c ****     else if (ch >= 'A' && ch <= 'F')
 704              		.loc 1 184 0
 705 0026 5738     		subs	r0, r0, #87
 706              	.LVL114:
 707 0028 FCE7     		b	.L48
 708              	.LVL115:
 709              	.L52:
 188:../codebase/tinyprintf.c **** }
 710              		.loc 1 188 0
 711 002a 0120     		movs	r0, #1
 712              	.LVL116:
 713 002c 4042     		rsbs	r0, r0, #0
 714 002e F9E7     		b	.L48
 715              		.cfi_endproc
 716              	.LFE6:
 718              		.section	.text.a2u,"ax",%progbits
 719              		.align	1
 720              		.syntax unified
 721              		.code	16
 722              		.thumb_func
 723              		.fpu softvfp
 725              	a2u:
 726              	.LFB7:
 190:../codebase/tinyprintf.c **** 
 191:../codebase/tinyprintf.c **** static char a2u(char ch, const char **src, int base, unsigned int *nump)
 192:../codebase/tinyprintf.c **** {
 727              		.loc 1 192 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              	.LVL117:
 732 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 733              	.LCFI12:
 734              		.cfi_def_cfa_offset 24
 735              		.cfi_offset 3, -24
 736              		.cfi_offset 4, -20
 737              		.cfi_offset 5, -16
 738              		.cfi_offset 6, -12
 739              		.cfi_offset 7, -8
 740              		.cfi_offset 14, -4
 741 0002 CE46     		mov	lr, r9
 742 0004 4746     		mov	r7, r8
 743 0006 80B5     		push	{r7, lr}
 744              	.LCFI13:
 745              		.cfi_def_cfa_offset 32
 746              		.cfi_offset 8, -32
 747              		.cfi_offset 9, -28
 748 0008 0600     		movs	r6, r0
 749 000a 8846     		mov	r8, r1
ARM GAS  /tmp/cc5t7vJc.s 			page 18


 750 000c 1700     		movs	r7, r2
 751 000e 9946     		mov	r9, r3
 193:../codebase/tinyprintf.c ****     const char *p = *src;
 752              		.loc 1 193 0
 753 0010 0D68     		ldr	r5, [r1]
 754              	.LVL118:
 194:../codebase/tinyprintf.c ****     unsigned int num = 0;
 755              		.loc 1 194 0
 756 0012 0024     		movs	r4, #0
 757              	.LVL119:
 758              	.L56:
 195:../codebase/tinyprintf.c ****     int digit;
 196:../codebase/tinyprintf.c ****     while ((digit = a2d(ch)) >= 0) {
 759              		.loc 1 196 0
 760 0014 3000     		movs	r0, r6
 761 0016 FFF7FEFF 		bl	a2d
 762              	.LVL120:
 763 001a 0028     		cmp	r0, #0
 764 001c 06DB     		blt	.L57
 197:../codebase/tinyprintf.c ****         if (digit > base)
 765              		.loc 1 197 0
 766 001e B842     		cmp	r0, r7
 767 0020 04DC     		bgt	.L57
 198:../codebase/tinyprintf.c ****             break;
 199:../codebase/tinyprintf.c ****         num = num * base + digit;
 768              		.loc 1 199 0
 769 0022 7C43     		muls	r4, r7
 770              	.LVL121:
 771 0024 2418     		adds	r4, r4, r0
 772              	.LVL122:
 200:../codebase/tinyprintf.c ****         ch = *p++;
 773              		.loc 1 200 0
 774 0026 2E78     		ldrb	r6, [r5]
 775              	.LVL123:
 776 0028 0135     		adds	r5, r5, #1
 777              	.LVL124:
 778 002a F3E7     		b	.L56
 779              	.L57:
 201:../codebase/tinyprintf.c ****     }
 202:../codebase/tinyprintf.c ****     *src = p;
 780              		.loc 1 202 0
 781 002c 4346     		mov	r3, r8
 782 002e 1D60     		str	r5, [r3]
 203:../codebase/tinyprintf.c ****     *nump = num;
 783              		.loc 1 203 0
 784 0030 4B46     		mov	r3, r9
 785 0032 1C60     		str	r4, [r3]
 204:../codebase/tinyprintf.c ****     return ch;
 205:../codebase/tinyprintf.c **** }
 786              		.loc 1 205 0
 787 0034 3000     		movs	r0, r6
 788              	.LVL125:
 789              		@ sp needed
 790              	.LVL126:
 791              	.LVL127:
 792              	.LVL128:
 793              	.LVL129:
ARM GAS  /tmp/cc5t7vJc.s 			page 19


 794              	.LVL130:
 795              	.LVL131:
 796 0036 0CBC     		pop	{r2, r3}
 797 0038 9046     		mov	r8, r2
 798 003a 9946     		mov	r9, r3
 799 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 800              		.cfi_endproc
 801              	.LFE7:
 803              		.section	.text.putchw,"ax",%progbits
 804              		.align	1
 805              		.syntax unified
 806              		.code	16
 807              		.thumb_func
 808              		.fpu softvfp
 810              	putchw:
 811              	.LFB8:
 206:../codebase/tinyprintf.c **** 
 207:../codebase/tinyprintf.c **** static void putchw(void *putp, putcf putf, struct param *p)
 208:../codebase/tinyprintf.c **** {
 812              		.loc 1 208 0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 8
 815              		@ frame_needed = 0, uses_anonymous_args = 0
 816              	.LVL132:
 817 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 818              	.LCFI14:
 819              		.cfi_def_cfa_offset 20
 820              		.cfi_offset 4, -20
 821              		.cfi_offset 5, -16
 822              		.cfi_offset 6, -12
 823              		.cfi_offset 7, -8
 824              		.cfi_offset 14, -4
 825 0002 83B0     		sub	sp, sp, #12
 826              	.LCFI15:
 827              		.cfi_def_cfa_offset 32
 828 0004 0190     		str	r0, [sp, #4]
 829 0006 0E00     		movs	r6, r1
 830 0008 1700     		movs	r7, r2
 209:../codebase/tinyprintf.c ****     char ch;
 210:../codebase/tinyprintf.c ****     int n = p->width;
 831              		.loc 1 210 0
 832 000a 5468     		ldr	r4, [r2, #4]
 833              	.LVL133:
 211:../codebase/tinyprintf.c ****     char *bf = p->bf;
 834              		.loc 1 211 0
 835 000c 1369     		ldr	r3, [r2, #16]
 836              	.LVL134:
 212:../codebase/tinyprintf.c **** 
 213:../codebase/tinyprintf.c ****     /* Number of filling characters */
 214:../codebase/tinyprintf.c ****     while (*bf++ && n > 0)
 837              		.loc 1 214 0
 838 000e 01E0     		b	.L60
 839              	.LVL135:
 840              	.L62:
 215:../codebase/tinyprintf.c ****         n--;
 841              		.loc 1 215 0
 842 0010 013C     		subs	r4, r4, #1
ARM GAS  /tmp/cc5t7vJc.s 			page 20


 843              	.LVL136:
 214:../codebase/tinyprintf.c ****         n--;
 844              		.loc 1 214 0
 845 0012 1300     		movs	r3, r2
 846              	.LVL137:
 847              	.L60:
 848 0014 5A1C     		adds	r2, r3, #1
 849              	.LVL138:
 850 0016 1B78     		ldrb	r3, [r3]
 851 0018 002B     		cmp	r3, #0
 852 001a 01D0     		beq	.L61
 214:../codebase/tinyprintf.c ****         n--;
 853              		.loc 1 214 0 is_stmt 0 discriminator 1
 854 001c 002C     		cmp	r4, #0
 855 001e F7DC     		bgt	.L62
 856              	.L61:
 216:../codebase/tinyprintf.c ****     if (p->sign)
 857              		.loc 1 216 0 is_stmt 1
 858 0020 3B7A     		ldrb	r3, [r7, #8]
 859 0022 002B     		cmp	r3, #0
 860 0024 00D0     		beq	.L63
 217:../codebase/tinyprintf.c ****         n--;
 861              		.loc 1 217 0
 862 0026 013C     		subs	r4, r4, #1
 863              	.LVL139:
 864              	.L63:
 218:../codebase/tinyprintf.c ****     if (p->alt && p->base == 16)
 865              		.loc 1 218 0
 866 0028 3A78     		ldrb	r2, [r7]
 867              	.LVL140:
 868 002a 0223     		movs	r3, #2
 869 002c 1340     		ands	r3, r2
 870 002e 02D0     		beq	.L64
 871              		.loc 1 218 0 is_stmt 0 discriminator 1
 872 0030 F968     		ldr	r1, [r7, #12]
 873              	.LVL141:
 874 0032 1029     		cmp	r1, #16
 875 0034 1BD0     		beq	.L82
 876              	.L64:
 219:../codebase/tinyprintf.c ****         n -= 2;
 220:../codebase/tinyprintf.c ****     else if (p->alt && p->base == 8)
 877              		.loc 1 220 0 is_stmt 1
 878 0036 002B     		cmp	r3, #0
 879 0038 02D0     		beq	.L65
 880              		.loc 1 220 0 is_stmt 0 discriminator 1
 881 003a FB68     		ldr	r3, [r7, #12]
 882 003c 082B     		cmp	r3, #8
 883 003e 18D0     		beq	.L83
 884              	.L65:
 221:../codebase/tinyprintf.c ****         n--;
 222:../codebase/tinyprintf.c **** 
 223:../codebase/tinyprintf.c ****     /* Fill with space to align to the right, before alternate or sign */
 224:../codebase/tinyprintf.c ****     if (!p->lz && !p->align_left) {
 885              		.loc 1 224 0 is_stmt 1
 886 0040 0923     		movs	r3, #9
 887 0042 1342     		tst	r3, r2
 888 0044 1BD0     		beq	.L66
ARM GAS  /tmp/cc5t7vJc.s 			page 21


 889              	.LVL142:
 890              	.L67:
 225:../codebase/tinyprintf.c ****         while (n-- > 0)
 226:../codebase/tinyprintf.c ****             putf(putp, ' ');
 227:../codebase/tinyprintf.c ****     }
 228:../codebase/tinyprintf.c **** 
 229:../codebase/tinyprintf.c ****     /* print sign */
 230:../codebase/tinyprintf.c ****     if (p->sign)
 891              		.loc 1 230 0
 892 0046 397A     		ldrb	r1, [r7, #8]
 893 0048 0029     		cmp	r1, #0
 894 004a 1DD1     		bne	.L84
 895              	.L69:
 231:../codebase/tinyprintf.c ****         putf(putp, p->sign);
 232:../codebase/tinyprintf.c **** 
 233:../codebase/tinyprintf.c ****     /* Alternate */
 234:../codebase/tinyprintf.c ****     if (p->alt && p->base == 16) {
 896              		.loc 1 234 0
 897 004c 3A78     		ldrb	r2, [r7]
 898 004e 0223     		movs	r3, #2
 899 0050 1340     		ands	r3, r2
 900 0052 02D0     		beq	.L70
 901              		.loc 1 234 0 is_stmt 0 discriminator 1
 902 0054 FA68     		ldr	r2, [r7, #12]
 903 0056 102A     		cmp	r2, #16
 904 0058 19D0     		beq	.L85
 905              	.L70:
 235:../codebase/tinyprintf.c ****         putf(putp, '0');
 236:../codebase/tinyprintf.c ****         putf(putp, (p->uc ? 'X' : 'x'));
 237:../codebase/tinyprintf.c ****     } else if (p->alt && p->base == 8) {
 906              		.loc 1 237 0 is_stmt 1
 907 005a 002B     		cmp	r3, #0
 908 005c 02D0     		beq	.L72
 909              		.loc 1 237 0 is_stmt 0 discriminator 1
 910 005e FB68     		ldr	r3, [r7, #12]
 911 0060 082B     		cmp	r3, #8
 912 0062 20D0     		beq	.L86
 913              	.L72:
 238:../codebase/tinyprintf.c ****         putf(putp, '0');
 239:../codebase/tinyprintf.c ****     }
 240:../codebase/tinyprintf.c **** 
 241:../codebase/tinyprintf.c ****     /* Fill with zeros, after alternate or sign */
 242:../codebase/tinyprintf.c ****     if (p->lz) {
 914              		.loc 1 242 0 is_stmt 1
 915 0064 3B78     		ldrb	r3, [r7]
 916 0066 DB07     		lsls	r3, r3, #31
 917 0068 25D4     		bmi	.L73
 918              	.L74:
 243:../codebase/tinyprintf.c ****         while (n-- > 0)
 244:../codebase/tinyprintf.c ****             putf(putp, '0');
 245:../codebase/tinyprintf.c ****     }
 246:../codebase/tinyprintf.c **** 
 247:../codebase/tinyprintf.c ****     /* Put actual buffer */
 248:../codebase/tinyprintf.c ****     bf = p->bf;
 919              		.loc 1 248 0
 920 006a 3B69     		ldr	r3, [r7, #16]
 921              	.LVL143:
ARM GAS  /tmp/cc5t7vJc.s 			page 22


 249:../codebase/tinyprintf.c ****     while ((ch = *bf++))
 922              		.loc 1 249 0
 923 006c 2BE0     		b	.L76
 924              	.LVL144:
 925              	.L82:
 219:../codebase/tinyprintf.c ****     else if (p->alt && p->base == 8)
 926              		.loc 1 219 0
 927 006e 023C     		subs	r4, r4, #2
 928              	.LVL145:
 929 0070 E6E7     		b	.L65
 930              	.L83:
 221:../codebase/tinyprintf.c **** 
 931              		.loc 1 221 0
 932 0072 013C     		subs	r4, r4, #1
 933              	.LVL146:
 934 0074 E4E7     		b	.L65
 935              	.LVL147:
 936              	.L68:
 226:../codebase/tinyprintf.c ****     }
 937              		.loc 1 226 0
 938 0076 2021     		movs	r1, #32
 939 0078 0198     		ldr	r0, [sp, #4]
 940 007a B047     		blx	r6
 941              	.LVL148:
 225:../codebase/tinyprintf.c ****             putf(putp, ' ');
 942              		.loc 1 225 0
 943 007c 2C00     		movs	r4, r5
 944              	.LVL149:
 945              	.L66:
 946 007e 651E     		subs	r5, r4, #1
 947              	.LVL150:
 948 0080 002C     		cmp	r4, #0
 949 0082 F8DC     		bgt	.L68
 950 0084 2C00     		movs	r4, r5
 951 0086 DEE7     		b	.L67
 952              	.LVL151:
 953              	.L84:
 231:../codebase/tinyprintf.c **** 
 954              		.loc 1 231 0
 955 0088 0198     		ldr	r0, [sp, #4]
 956 008a B047     		blx	r6
 957              	.LVL152:
 958 008c DEE7     		b	.L69
 959              	.L85:
 235:../codebase/tinyprintf.c ****         putf(putp, (p->uc ? 'X' : 'x'));
 960              		.loc 1 235 0
 961 008e 3021     		movs	r1, #48
 962 0090 0198     		ldr	r0, [sp, #4]
 963 0092 B047     		blx	r6
 964              	.LVL153:
 236:../codebase/tinyprintf.c ****     } else if (p->alt && p->base == 8) {
 965              		.loc 1 236 0
 966 0094 3B78     		ldrb	r3, [r7]
 967 0096 5B07     		lsls	r3, r3, #29
 968 0098 03D5     		bpl	.L81
 969 009a 5821     		movs	r1, #88
 970              	.L71:
ARM GAS  /tmp/cc5t7vJc.s 			page 23


 236:../codebase/tinyprintf.c ****     } else if (p->alt && p->base == 8) {
 971              		.loc 1 236 0 is_stmt 0 discriminator 4
 972 009c 0198     		ldr	r0, [sp, #4]
 973 009e B047     		blx	r6
 974              	.LVL154:
 975 00a0 E0E7     		b	.L72
 976              	.L81:
 236:../codebase/tinyprintf.c ****     } else if (p->alt && p->base == 8) {
 977              		.loc 1 236 0
 978 00a2 7821     		movs	r1, #120
 979 00a4 FAE7     		b	.L71
 980              	.L86:
 238:../codebase/tinyprintf.c ****     }
 981              		.loc 1 238 0 is_stmt 1
 982 00a6 3021     		movs	r1, #48
 983 00a8 0198     		ldr	r0, [sp, #4]
 984 00aa B047     		blx	r6
 985              	.LVL155:
 986 00ac DAE7     		b	.L72
 987              	.LVL156:
 988              	.L75:
 244:../codebase/tinyprintf.c ****     }
 989              		.loc 1 244 0
 990 00ae 3021     		movs	r1, #48
 991 00b0 0198     		ldr	r0, [sp, #4]
 992 00b2 B047     		blx	r6
 993              	.LVL157:
 243:../codebase/tinyprintf.c ****             putf(putp, '0');
 994              		.loc 1 243 0
 995 00b4 2C00     		movs	r4, r5
 996              	.LVL158:
 997              	.L73:
 998 00b6 651E     		subs	r5, r4, #1
 999              	.LVL159:
 1000 00b8 002C     		cmp	r4, #0
 1001 00ba F8DC     		bgt	.L75
 1002 00bc 2C00     		movs	r4, r5
 1003 00be D4E7     		b	.L74
 1004              	.LVL160:
 1005              	.L77:
 250:../codebase/tinyprintf.c ****         putf(putp, ch);
 1006              		.loc 1 250 0
 1007 00c0 0198     		ldr	r0, [sp, #4]
 1008 00c2 B047     		blx	r6
 1009              	.LVL161:
 249:../codebase/tinyprintf.c ****         putf(putp, ch);
 1010              		.loc 1 249 0
 1011 00c4 2B00     		movs	r3, r5
 1012              	.LVL162:
 1013              	.L76:
 1014 00c6 5D1C     		adds	r5, r3, #1
 1015              	.LVL163:
 1016 00c8 1978     		ldrb	r1, [r3]
 1017              	.LVL164:
 1018 00ca 0029     		cmp	r1, #0
 1019 00cc F8D1     		bne	.L77
 251:../codebase/tinyprintf.c **** 
ARM GAS  /tmp/cc5t7vJc.s 			page 24


 252:../codebase/tinyprintf.c ****     /* Fill with space to align to the left, after string */
 253:../codebase/tinyprintf.c ****     if (!p->lz && p->align_left) {
 1020              		.loc 1 253 0
 1021 00ce 3A78     		ldrb	r2, [r7]
 1022 00d0 0923     		movs	r3, #9
 1023 00d2 1340     		ands	r3, r2
 1024 00d4 082B     		cmp	r3, #8
 1025 00d6 05D0     		beq	.L78
 1026              	.LVL165:
 1027              	.L59:
 254:../codebase/tinyprintf.c ****         while (n-- > 0)
 255:../codebase/tinyprintf.c ****             putf(putp, ' ');
 256:../codebase/tinyprintf.c ****     }
 257:../codebase/tinyprintf.c **** }
 1028              		.loc 1 257 0
 1029 00d8 03B0     		add	sp, sp, #12
 1030              		@ sp needed
 1031              	.LVL166:
 1032              	.LVL167:
 1033 00da F0BD     		pop	{r4, r5, r6, r7, pc}
 1034              	.LVL168:
 1035              	.L80:
 255:../codebase/tinyprintf.c ****     }
 1036              		.loc 1 255 0
 1037 00dc 2021     		movs	r1, #32
 1038 00de 0198     		ldr	r0, [sp, #4]
 1039 00e0 B047     		blx	r6
 1040              	.LVL169:
 254:../codebase/tinyprintf.c ****         while (n-- > 0)
 1041              		.loc 1 254 0
 1042 00e2 3C00     		movs	r4, r7
 1043              	.LVL170:
 1044              	.L78:
 1045 00e4 671E     		subs	r7, r4, #1
 1046              	.LVL171:
 1047 00e6 002C     		cmp	r4, #0
 1048 00e8 F8DC     		bgt	.L80
 1049 00ea F5E7     		b	.L59
 1050              		.cfi_endproc
 1051              	.LFE8:
 1053              		.section	.text._vsnprintf_putcf,"ax",%progbits
 1054              		.align	1
 1055              		.syntax unified
 1056              		.code	16
 1057              		.thumb_func
 1058              		.fpu softvfp
 1060              	_vsnprintf_putcf:
 1061              	.LFB12:
 258:../codebase/tinyprintf.c **** 
 259:../codebase/tinyprintf.c **** void tfp_format(void *putp, putcf putf, const char *fmt, va_list va)
 260:../codebase/tinyprintf.c **** {
 261:../codebase/tinyprintf.c ****     struct param p;
 262:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 263:../codebase/tinyprintf.c ****     char bf[23];  /* long = 64b on some architectures */
 264:../codebase/tinyprintf.c **** #else
 265:../codebase/tinyprintf.c ****     char bf[12];  /* int = 32b on some architectures */
 266:../codebase/tinyprintf.c **** #endif
ARM GAS  /tmp/cc5t7vJc.s 			page 25


 267:../codebase/tinyprintf.c ****     char ch;
 268:../codebase/tinyprintf.c ****     p.bf = bf;
 269:../codebase/tinyprintf.c **** 
 270:../codebase/tinyprintf.c ****     while ((ch = *(fmt++))) {
 271:../codebase/tinyprintf.c ****         if (ch != '%') {
 272:../codebase/tinyprintf.c ****             putf(putp, ch);
 273:../codebase/tinyprintf.c ****         } else {
 274:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 275:../codebase/tinyprintf.c ****             char lng = 0;  /* 1 for long, 2 for long long */
 276:../codebase/tinyprintf.c **** #endif
 277:../codebase/tinyprintf.c ****             /* Init parameter struct */
 278:../codebase/tinyprintf.c ****             p.lz = 0;
 279:../codebase/tinyprintf.c ****             p.alt = 0;
 280:../codebase/tinyprintf.c ****             p.width = 0;
 281:../codebase/tinyprintf.c ****             p.align_left = 0;
 282:../codebase/tinyprintf.c ****             p.sign = 0;
 283:../codebase/tinyprintf.c **** 
 284:../codebase/tinyprintf.c ****             /* Flags */
 285:../codebase/tinyprintf.c ****             while ((ch = *(fmt++))) {
 286:../codebase/tinyprintf.c ****                 switch (ch) {
 287:../codebase/tinyprintf.c ****                 case '-':
 288:../codebase/tinyprintf.c ****                     p.align_left = 1;
 289:../codebase/tinyprintf.c ****                     continue;
 290:../codebase/tinyprintf.c ****                 case '0':
 291:../codebase/tinyprintf.c ****                     p.lz = 1;
 292:../codebase/tinyprintf.c ****                     continue;
 293:../codebase/tinyprintf.c ****                 case '#':
 294:../codebase/tinyprintf.c ****                     p.alt = 1;
 295:../codebase/tinyprintf.c ****                     continue;
 296:../codebase/tinyprintf.c ****                 default:
 297:../codebase/tinyprintf.c ****                     break;
 298:../codebase/tinyprintf.c ****                 }
 299:../codebase/tinyprintf.c ****                 break;
 300:../codebase/tinyprintf.c ****             }
 301:../codebase/tinyprintf.c **** 
 302:../codebase/tinyprintf.c ****             /* Width */
 303:../codebase/tinyprintf.c ****             if (ch >= '0' && ch <= '9') {
 304:../codebase/tinyprintf.c ****                 ch = a2u(ch, &fmt, 10, &(p.width));
 305:../codebase/tinyprintf.c ****             }
 306:../codebase/tinyprintf.c **** 
 307:../codebase/tinyprintf.c ****             /* We accept 'x.y' format but don't support it completely:
 308:../codebase/tinyprintf.c ****              * we ignore the 'y' digit => this ignores 0-fill
 309:../codebase/tinyprintf.c ****              * size and makes it == width (ie. 'x') */
 310:../codebase/tinyprintf.c ****             if (ch == '.') {
 311:../codebase/tinyprintf.c ****               p.lz = 1;  /* zero-padding */
 312:../codebase/tinyprintf.c ****               /* ignore actual 0-fill size: */
 313:../codebase/tinyprintf.c ****               do {
 314:../codebase/tinyprintf.c ****                 ch = *(fmt++);
 315:../codebase/tinyprintf.c ****               } while ((ch >= '0') && (ch <= '9'));
 316:../codebase/tinyprintf.c ****             }
 317:../codebase/tinyprintf.c **** 
 318:../codebase/tinyprintf.c **** #ifdef PRINTF_SIZE_T_SUPPORT
 319:../codebase/tinyprintf.c **** # ifdef PRINTF_LONG_SUPPORT
 320:../codebase/tinyprintf.c ****             if (ch == 'z') {
 321:../codebase/tinyprintf.c ****                 ch = *(fmt++);
 322:../codebase/tinyprintf.c ****                 if (sizeof(size_t) == sizeof(unsigned long int))
 323:../codebase/tinyprintf.c ****                     lng = 1;
ARM GAS  /tmp/cc5t7vJc.s 			page 26


 324:../codebase/tinyprintf.c **** #  ifdef PRINTF_LONG_LONG_SUPPORT
 325:../codebase/tinyprintf.c ****                 else if (sizeof(size_t) == sizeof(unsigned long long int))
 326:../codebase/tinyprintf.c ****                     lng = 2;
 327:../codebase/tinyprintf.c **** #  endif
 328:../codebase/tinyprintf.c ****             } else
 329:../codebase/tinyprintf.c **** # endif
 330:../codebase/tinyprintf.c **** #endif
 331:../codebase/tinyprintf.c **** 
 332:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 333:../codebase/tinyprintf.c ****             if (ch == 'l') {
 334:../codebase/tinyprintf.c ****                 ch = *(fmt++);
 335:../codebase/tinyprintf.c ****                 lng = 1;
 336:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_LONG_SUPPORT
 337:../codebase/tinyprintf.c ****                 if (ch == 'l') {
 338:../codebase/tinyprintf.c ****                   ch = *(fmt++);
 339:../codebase/tinyprintf.c ****                   lng = 2;
 340:../codebase/tinyprintf.c ****                 }
 341:../codebase/tinyprintf.c **** #endif
 342:../codebase/tinyprintf.c ****             }
 343:../codebase/tinyprintf.c **** #endif
 344:../codebase/tinyprintf.c ****             switch (ch) {
 345:../codebase/tinyprintf.c ****             case 0:
 346:../codebase/tinyprintf.c ****                 goto abort;
 347:../codebase/tinyprintf.c ****             case 'u':
 348:../codebase/tinyprintf.c ****                 p.base = 10;
 349:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 350:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_LONG_SUPPORT
 351:../codebase/tinyprintf.c ****                 if (2 == lng)
 352:../codebase/tinyprintf.c ****                     ulli2a(va_arg(va, unsigned long long int), &p);
 353:../codebase/tinyprintf.c ****                 else
 354:../codebase/tinyprintf.c **** #endif
 355:../codebase/tinyprintf.c ****                   if (1 == lng)
 356:../codebase/tinyprintf.c ****                     uli2a(va_arg(va, unsigned long int), &p);
 357:../codebase/tinyprintf.c ****                 else
 358:../codebase/tinyprintf.c **** #endif
 359:../codebase/tinyprintf.c ****                     ui2a(va_arg(va, unsigned int), &p);
 360:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 361:../codebase/tinyprintf.c ****                 break;
 362:../codebase/tinyprintf.c ****             case 'd':
 363:../codebase/tinyprintf.c ****             case 'i':
 364:../codebase/tinyprintf.c ****                 p.base = 10;
 365:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 366:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_LONG_SUPPORT
 367:../codebase/tinyprintf.c ****                 if (2 == lng)
 368:../codebase/tinyprintf.c ****                     lli2a(va_arg(va, long long int), &p);
 369:../codebase/tinyprintf.c ****                 else
 370:../codebase/tinyprintf.c **** #endif
 371:../codebase/tinyprintf.c ****                   if (1 == lng)
 372:../codebase/tinyprintf.c ****                     li2a(va_arg(va, long int), &p);
 373:../codebase/tinyprintf.c ****                 else
 374:../codebase/tinyprintf.c **** #endif
 375:../codebase/tinyprintf.c ****                     i2a(va_arg(va, int), &p);
 376:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 377:../codebase/tinyprintf.c ****                 break;
 378:../codebase/tinyprintf.c **** #ifdef SIZEOF_POINTER
 379:../codebase/tinyprintf.c ****             case 'p':
 380:../codebase/tinyprintf.c ****                 p.alt = 1;
ARM GAS  /tmp/cc5t7vJc.s 			page 27


 381:../codebase/tinyprintf.c **** # if defined(SIZEOF_INT) && SIZEOF_POINTER <= SIZEOF_INT
 382:../codebase/tinyprintf.c ****                 lng = 0;
 383:../codebase/tinyprintf.c **** # elif defined(SIZEOF_LONG) && SIZEOF_POINTER <= SIZEOF_LONG
 384:../codebase/tinyprintf.c ****                 lng = 1;
 385:../codebase/tinyprintf.c **** # elif defined(SIZEOF_LONG_LONG) && SIZEOF_POINTER <= SIZEOF_LONG_LONG
 386:../codebase/tinyprintf.c ****                 lng = 2;
 387:../codebase/tinyprintf.c **** # endif
 388:../codebase/tinyprintf.c **** #endif
 389:../codebase/tinyprintf.c ****             case 'x':
 390:../codebase/tinyprintf.c ****             case 'X':
 391:../codebase/tinyprintf.c ****                 p.base = 16;
 392:../codebase/tinyprintf.c ****                 p.uc = (ch == 'X')?1:0;
 393:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 394:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_LONG_SUPPORT
 395:../codebase/tinyprintf.c ****                 if (2 == lng)
 396:../codebase/tinyprintf.c ****                     ulli2a(va_arg(va, unsigned long long int), &p);
 397:../codebase/tinyprintf.c ****                 else
 398:../codebase/tinyprintf.c **** #endif
 399:../codebase/tinyprintf.c ****                   if (1 == lng)
 400:../codebase/tinyprintf.c ****                     uli2a(va_arg(va, unsigned long int), &p);
 401:../codebase/tinyprintf.c ****                 else
 402:../codebase/tinyprintf.c **** #endif
 403:../codebase/tinyprintf.c ****                     ui2a(va_arg(va, unsigned int), &p);
 404:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 405:../codebase/tinyprintf.c ****                 break;
 406:../codebase/tinyprintf.c ****             case 'o':
 407:../codebase/tinyprintf.c ****                 p.base = 8;
 408:../codebase/tinyprintf.c ****                 ui2a(va_arg(va, unsigned int), &p);
 409:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 410:../codebase/tinyprintf.c ****                 break;
 411:../codebase/tinyprintf.c ****             case 'c':
 412:../codebase/tinyprintf.c ****                 putf(putp, (char)(va_arg(va, int)));
 413:../codebase/tinyprintf.c ****                 break;
 414:../codebase/tinyprintf.c ****             case 's':
 415:../codebase/tinyprintf.c ****                 p.bf = va_arg(va, char *);
 416:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 417:../codebase/tinyprintf.c ****                 p.bf = bf;
 418:../codebase/tinyprintf.c ****                 break;
 419:../codebase/tinyprintf.c ****             case '%':
 420:../codebase/tinyprintf.c ****                 putf(putp, ch);
 421:../codebase/tinyprintf.c ****             default:
 422:../codebase/tinyprintf.c ****                 break;
 423:../codebase/tinyprintf.c ****             }
 424:../codebase/tinyprintf.c ****         }
 425:../codebase/tinyprintf.c ****     }
 426:../codebase/tinyprintf.c ****  abort:;
 427:../codebase/tinyprintf.c **** }
 428:../codebase/tinyprintf.c **** 
 429:../codebase/tinyprintf.c **** #if TINYPRINTF_DEFINE_TFP_PRINTF
 430:../codebase/tinyprintf.c **** static putcf stdout_putf;
 431:../codebase/tinyprintf.c **** static void *stdout_putp;
 432:../codebase/tinyprintf.c **** 
 433:../codebase/tinyprintf.c **** void init_printf(void *putp, putcf putf)
 434:../codebase/tinyprintf.c **** {
 435:../codebase/tinyprintf.c ****     stdout_putf = putf;
 436:../codebase/tinyprintf.c ****     stdout_putp = putp;
 437:../codebase/tinyprintf.c **** }
ARM GAS  /tmp/cc5t7vJc.s 			page 28


 438:../codebase/tinyprintf.c **** 
 439:../codebase/tinyprintf.c **** void tfp_printf(char *fmt, ...)
 440:../codebase/tinyprintf.c **** {
 441:../codebase/tinyprintf.c ****     va_list va;
 442:../codebase/tinyprintf.c ****     va_start(va, fmt);
 443:../codebase/tinyprintf.c ****     tfp_format(stdout_putp, stdout_putf, fmt, va);
 444:../codebase/tinyprintf.c ****     //To inform that the printf line is done
 445:../codebase/tinyprintf.c ****     stdout_putf((void *)START_TX,0);
 446:../codebase/tinyprintf.c ****     va_end(va);
 447:../codebase/tinyprintf.c **** }
 448:../codebase/tinyprintf.c **** #endif
 449:../codebase/tinyprintf.c **** 
 450:../codebase/tinyprintf.c **** #if TINYPRINTF_DEFINE_TFP_SPRINTF
 451:../codebase/tinyprintf.c **** struct _vsnprintf_putcf_data
 452:../codebase/tinyprintf.c **** {
 453:../codebase/tinyprintf.c ****   size_t dest_capacity;
 454:../codebase/tinyprintf.c ****   char *dest;
 455:../codebase/tinyprintf.c ****   size_t num_chars;
 456:../codebase/tinyprintf.c **** };
 457:../codebase/tinyprintf.c **** 
 458:../codebase/tinyprintf.c **** static void _vsnprintf_putcf(void *p, char c)
 459:../codebase/tinyprintf.c **** {
 1062              		.loc 1 459 0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 0
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 1066              		@ link register save eliminated.
 1067              	.LVL172:
 460:../codebase/tinyprintf.c ****   struct _vsnprintf_putcf_data *data = (struct _vsnprintf_putcf_data*)p;
 461:../codebase/tinyprintf.c ****   if (data->num_chars < data->dest_capacity)
 1068              		.loc 1 461 0
 1069 0000 8368     		ldr	r3, [r0, #8]
 1070 0002 0268     		ldr	r2, [r0]
 1071 0004 9342     		cmp	r3, r2
 1072 0006 01D2     		bcs	.L88
 462:../codebase/tinyprintf.c ****     data->dest[data->num_chars] = c;
 1073              		.loc 1 462 0
 1074 0008 4268     		ldr	r2, [r0, #4]
 1075 000a D154     		strb	r1, [r2, r3]
 1076              	.L88:
 463:../codebase/tinyprintf.c ****   data->num_chars ++;
 1077              		.loc 1 463 0
 1078 000c 8368     		ldr	r3, [r0, #8]
 1079 000e 0133     		adds	r3, r3, #1
 1080 0010 8360     		str	r3, [r0, #8]
 464:../codebase/tinyprintf.c **** }
 1081              		.loc 1 464 0
 1082              		@ sp needed
 1083 0012 7047     		bx	lr
 1084              		.cfi_endproc
 1085              	.LFE12:
 1087              		.section	.text._vsprintf_putcf,"ax",%progbits
 1088              		.align	1
 1089              		.syntax unified
 1090              		.code	16
 1091              		.thumb_func
 1092              		.fpu softvfp
ARM GAS  /tmp/cc5t7vJc.s 			page 29


 1094              	_vsprintf_putcf:
 1095              	.LFB15:
 465:../codebase/tinyprintf.c **** 
 466:../codebase/tinyprintf.c **** int tfp_vsnprintf(char *str, size_t size, const char *format, va_list ap)
 467:../codebase/tinyprintf.c **** {
 468:../codebase/tinyprintf.c ****   struct _vsnprintf_putcf_data data;
 469:../codebase/tinyprintf.c **** 
 470:../codebase/tinyprintf.c ****   if (size < 1)
 471:../codebase/tinyprintf.c ****     return 0;
 472:../codebase/tinyprintf.c **** 
 473:../codebase/tinyprintf.c ****   data.dest = str;
 474:../codebase/tinyprintf.c ****   data.dest_capacity = size-1;
 475:../codebase/tinyprintf.c ****   data.num_chars = 0;
 476:../codebase/tinyprintf.c ****   tfp_format(&data, _vsnprintf_putcf, format, ap);
 477:../codebase/tinyprintf.c **** 
 478:../codebase/tinyprintf.c ****   if (data.num_chars < data.dest_capacity)
 479:../codebase/tinyprintf.c ****     data.dest[data.num_chars] = '\0';
 480:../codebase/tinyprintf.c ****   else
 481:../codebase/tinyprintf.c ****     data.dest[data.dest_capacity] = '\0';
 482:../codebase/tinyprintf.c **** 
 483:../codebase/tinyprintf.c ****   return data.num_chars;
 484:../codebase/tinyprintf.c **** }
 485:../codebase/tinyprintf.c **** 
 486:../codebase/tinyprintf.c **** int tfp_snprintf(char *str, size_t size, const char *format, ...)
 487:../codebase/tinyprintf.c **** {
 488:../codebase/tinyprintf.c ****   va_list ap;
 489:../codebase/tinyprintf.c ****   int retval;
 490:../codebase/tinyprintf.c **** 
 491:../codebase/tinyprintf.c ****   va_start(ap, format);
 492:../codebase/tinyprintf.c ****   retval = tfp_vsnprintf(str, size, format, ap);
 493:../codebase/tinyprintf.c ****   va_end(ap);
 494:../codebase/tinyprintf.c ****   return retval;
 495:../codebase/tinyprintf.c **** }
 496:../codebase/tinyprintf.c **** 
 497:../codebase/tinyprintf.c **** struct _vsprintf_putcf_data
 498:../codebase/tinyprintf.c **** {
 499:../codebase/tinyprintf.c ****   char *dest;
 500:../codebase/tinyprintf.c ****   size_t num_chars;
 501:../codebase/tinyprintf.c **** };
 502:../codebase/tinyprintf.c **** 
 503:../codebase/tinyprintf.c **** static void _vsprintf_putcf(void *p, char c)
 504:../codebase/tinyprintf.c **** {
 1096              		.loc 1 504 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              	.LVL173:
 1101 0000 10B5     		push	{r4, lr}
 1102              	.LCFI16:
 1103              		.cfi_def_cfa_offset 8
 1104              		.cfi_offset 4, -8
 1105              		.cfi_offset 14, -4
 1106              	.LVL174:
 505:../codebase/tinyprintf.c ****   struct _vsprintf_putcf_data *data = (struct _vsprintf_putcf_data*)p;
 506:../codebase/tinyprintf.c ****   data->dest[data->num_chars++] = c;
 1107              		.loc 1 506 0
 1108 0002 0268     		ldr	r2, [r0]
ARM GAS  /tmp/cc5t7vJc.s 			page 30


 1109 0004 4368     		ldr	r3, [r0, #4]
 1110 0006 5C1C     		adds	r4, r3, #1
 1111 0008 4460     		str	r4, [r0, #4]
 1112 000a D154     		strb	r1, [r2, r3]
 507:../codebase/tinyprintf.c **** }
 1113              		.loc 1 507 0
 1114              		@ sp needed
 1115 000c 10BD     		pop	{r4, pc}
 1116              		.cfi_endproc
 1117              	.LFE15:
 1119              		.section	.text.tfp_format,"ax",%progbits
 1120              		.align	1
 1121              		.global	tfp_format
 1122              		.syntax unified
 1123              		.code	16
 1124              		.thumb_func
 1125              		.fpu softvfp
 1127              	tfp_format:
 1128              	.LFB9:
 260:../codebase/tinyprintf.c ****     struct param p;
 1129              		.loc 1 260 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 56
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              	.LVL175:
 1134 0000 70B5     		push	{r4, r5, r6, lr}
 1135              	.LCFI17:
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 4, -16
 1138              		.cfi_offset 5, -12
 1139              		.cfi_offset 6, -8
 1140              		.cfi_offset 14, -4
 1141 0002 8EB0     		sub	sp, sp, #56
 1142              	.LCFI18:
 1143              		.cfi_def_cfa_offset 72
 1144 0004 0400     		movs	r4, r0
 1145 0006 0D00     		movs	r5, r1
 1146 0008 0192     		str	r2, [sp, #4]
 1147 000a 0093     		str	r3, [sp]
 268:../codebase/tinyprintf.c **** 
 1148              		.loc 1 268 0
 1149 000c 03AB     		add	r3, sp, #12
 1150 000e 0D93     		str	r3, [sp, #52]
 270:../codebase/tinyprintf.c ****         if (ch != '%') {
 1151              		.loc 1 270 0
 1152 0010 55E0     		b	.L91
 1153              	.LVL176:
 1154              	.L92:
 1155              	.LBB8:
 278:../codebase/tinyprintf.c ****             p.alt = 0;
 1156              		.loc 1 278 0
 1157 0012 09AA     		add	r2, sp, #36
 1158 0014 1378     		ldrb	r3, [r2]
 279:../codebase/tinyprintf.c ****             p.width = 0;
 1159              		.loc 1 279 0
 1160 0016 0121     		movs	r1, #1
 1161              	.LVL177:
ARM GAS  /tmp/cc5t7vJc.s 			page 31


 1162 0018 8B43     		bics	r3, r1
 280:../codebase/tinyprintf.c ****             p.align_left = 0;
 1163              		.loc 1 280 0
 1164 001a 0021     		movs	r1, #0
 1165 001c 0A91     		str	r1, [sp, #40]
 1166              	.LVL178:
 281:../codebase/tinyprintf.c ****             p.sign = 0;
 1167              		.loc 1 281 0
 1168 001e 0220     		movs	r0, #2
 1169 0020 8343     		bics	r3, r0
 1170 0022 0630     		adds	r0, r0, #6
 1171 0024 8343     		bics	r3, r0
 1172 0026 1370     		strb	r3, [r2]
 282:../codebase/tinyprintf.c **** 
 1173              		.loc 1 282 0
 1174 0028 1172     		strb	r1, [r2, #8]
 1175              	.L94:
 285:../codebase/tinyprintf.c ****                 switch (ch) {
 1176              		.loc 1 285 0
 1177 002a 019B     		ldr	r3, [sp, #4]
 1178 002c 5A1C     		adds	r2, r3, #1
 1179 002e 0192     		str	r2, [sp, #4]
 1180 0030 1878     		ldrb	r0, [r3]
 1181              	.LVL179:
 1182 0032 0028     		cmp	r0, #0
 1183 0034 05D0     		beq	.L95
 286:../codebase/tinyprintf.c ****                 case '-':
 1184              		.loc 1 286 0
 1185 0036 2D28     		cmp	r0, #45
 1186 0038 4DD0     		beq	.L96
 1187 003a 3028     		cmp	r0, #48
 1188 003c 51D0     		beq	.L97
 1189 003e 2328     		cmp	r0, #35
 1190 0040 55D0     		beq	.L130
 1191              	.L95:
 303:../codebase/tinyprintf.c ****                 ch = a2u(ch, &fmt, 10, &(p.width));
 1192              		.loc 1 303 0
 1193 0042 0300     		movs	r3, r0
 1194 0044 303B     		subs	r3, r3, #48
 1195 0046 DBB2     		uxtb	r3, r3
 1196 0048 092B     		cmp	r3, #9
 1197 004a 56D9     		bls	.L131
 1198              	.LVL180:
 1199              	.L101:
 310:../codebase/tinyprintf.c ****               p.lz = 1;  /* zero-padding */
 1200              		.loc 1 310 0
 1201 004c 2E28     		cmp	r0, #46
 1202 004e 5AD0     		beq	.L132
 1203              	.L102:
 320:../codebase/tinyprintf.c ****                 ch = *(fmt++);
 1204              		.loc 1 320 0
 1205 0050 7A28     		cmp	r0, #122
 1206 0052 67D0     		beq	.L133
 333:../codebase/tinyprintf.c ****                 ch = *(fmt++);
 1207              		.loc 1 333 0
 1208 0054 6C28     		cmp	r0, #108
 1209 0056 6BD0     		beq	.L134
ARM GAS  /tmp/cc5t7vJc.s 			page 32


 275:../codebase/tinyprintf.c **** #endif
 1210              		.loc 1 275 0
 1211 0058 0023     		movs	r3, #0
 1212              	.LVL181:
 1213              	.L105:
 344:../codebase/tinyprintf.c ****             case 0:
 1214              		.loc 1 344 0
 1215 005a 6928     		cmp	r0, #105
 1216 005c 00D1     		bne	.LCB1301
 1217 005e 8BE0     		b	.L106	@long jump
 1218              	.LCB1301:
 1219 0060 73D9     		bls	.L135
 1220 0062 7328     		cmp	r0, #115
 1221 0064 00D1     		bne	.LCB1306
 1222 0066 01E1     		b	.L113	@long jump
 1223              	.LCB1306:
 1224 0068 00D9     		bls	.LCB1308
 1225 006a 98E0     		b	.L114	@long jump
 1226              	.LCB1308:
 1227 006c 6F28     		cmp	r0, #111
 1228 006e 00D1     		bne	.LCB1310
 1229 0070 EDE0     		b	.L115	@long jump
 1230              	.LCB1310:
 1231 0072 7028     		cmp	r0, #112
 1232 0074 23D1     		bne	.L91
 380:../codebase/tinyprintf.c **** # if defined(SIZEOF_INT) && SIZEOF_POINTER <= SIZEOF_INT
 1233              		.loc 1 380 0
 1234 0076 09AA     		add	r2, sp, #36
 1235 0078 1378     		ldrb	r3, [r2]
 1236              	.LVL182:
 1237 007a 0221     		movs	r1, #2
 1238 007c 0B43     		orrs	r3, r1
 1239 007e 1370     		strb	r3, [r2]
 1240              	.LVL183:
 382:../codebase/tinyprintf.c **** # elif defined(SIZEOF_LONG) && SIZEOF_POINTER <= SIZEOF_LONG
 1241              		.loc 1 382 0
 1242 0080 0023     		movs	r3, #0
 1243              	.LVL184:
 1244              	.L108:
 391:../codebase/tinyprintf.c ****                 p.uc = (ch == 'X')?1:0;
 1245              		.loc 1 391 0
 1246 0082 09AA     		add	r2, sp, #36
 1247 0084 1021     		movs	r1, #16
 1248 0086 0C91     		str	r1, [sp, #48]
 392:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 1249              		.loc 1 392 0
 1250 0088 5838     		subs	r0, r0, #88
 1251              	.LVL185:
 1252 008a 4142     		rsbs	r1, r0, #0
 1253 008c 4841     		adcs	r0, r0, r1
 1254 008e 8100     		lsls	r1, r0, #2
 1255 0090 1078     		ldrb	r0, [r2]
 1256 0092 0426     		movs	r6, #4
 1257 0094 B043     		bics	r0, r6
 1258 0096 0843     		orrs	r0, r1
 1259 0098 1070     		strb	r0, [r2]
 395:../codebase/tinyprintf.c ****                     ulli2a(va_arg(va, unsigned long long int), &p);
ARM GAS  /tmp/cc5t7vJc.s 			page 33


 1260              		.loc 1 395 0
 1261 009a 022B     		cmp	r3, #2
 1262 009c 00D1     		bne	.LCB1341
 1263 009e C1E0     		b	.L136	@long jump
 1264              	.LCB1341:
 399:../codebase/tinyprintf.c ****                     uli2a(va_arg(va, unsigned long int), &p);
 1265              		.loc 1 399 0
 1266 00a0 012B     		cmp	r3, #1
 1267 00a2 00D1     		bne	.LCB1343
 1268 00a4 CBE0     		b	.L137	@long jump
 1269              	.LCB1343:
 403:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 1270              		.loc 1 403 0
 1271 00a6 009B     		ldr	r3, [sp]
 1272              	.LVL186:
 1273 00a8 1A1D     		adds	r2, r3, #4
 1274 00aa 0092     		str	r2, [sp]
 1275 00ac 1868     		ldr	r0, [r3]
 1276 00ae 09A9     		add	r1, sp, #36
 1277 00b0 FFF7FEFF 		bl	ui2a
 1278              	.LVL187:
 1279              	.L125:
 404:../codebase/tinyprintf.c ****                 break;
 1280              		.loc 1 404 0
 1281 00b4 09AA     		add	r2, sp, #36
 1282 00b6 2900     		movs	r1, r5
 1283 00b8 2000     		movs	r0, r4
 1284 00ba FFF7FEFF 		bl	putchw
 1285              	.LVL188:
 1286              	.L91:
 1287              	.LBE8:
 270:../codebase/tinyprintf.c ****         if (ch != '%') {
 1288              		.loc 1 270 0
 1289 00be 019B     		ldr	r3, [sp, #4]
 1290 00c0 5A1C     		adds	r2, r3, #1
 1291 00c2 0192     		str	r2, [sp, #4]
 1292 00c4 1978     		ldrb	r1, [r3]
 1293              	.LVL189:
 1294 00c6 0029     		cmp	r1, #0
 1295 00c8 00D1     		bne	.LCB1372
 1296 00ca DCE0     		b	.L90	@long jump
 1297              	.LCB1372:
 271:../codebase/tinyprintf.c ****             putf(putp, ch);
 1298              		.loc 1 271 0
 1299 00cc 2529     		cmp	r1, #37
 1300 00ce A0D0     		beq	.L92
 272:../codebase/tinyprintf.c ****         } else {
 1301              		.loc 1 272 0
 1302 00d0 2000     		movs	r0, r4
 1303 00d2 A847     		blx	r5
 1304              	.LVL190:
 1305 00d4 F3E7     		b	.L91
 1306              	.LVL191:
 1307              	.L96:
 1308              	.LBB9:
 288:../codebase/tinyprintf.c ****                     continue;
 1309              		.loc 1 288 0
ARM GAS  /tmp/cc5t7vJc.s 			page 34


 1310 00d6 09AA     		add	r2, sp, #36
 1311 00d8 1378     		ldrb	r3, [r2]
 1312 00da 0821     		movs	r1, #8
 1313 00dc 0B43     		orrs	r3, r1
 1314 00de 1370     		strb	r3, [r2]
 289:../codebase/tinyprintf.c ****                 case '0':
 1315              		.loc 1 289 0
 1316 00e0 A3E7     		b	.L94
 1317              	.L97:
 291:../codebase/tinyprintf.c ****                     continue;
 1318              		.loc 1 291 0
 1319 00e2 09AA     		add	r2, sp, #36
 1320 00e4 1378     		ldrb	r3, [r2]
 1321 00e6 0121     		movs	r1, #1
 1322 00e8 0B43     		orrs	r3, r1
 1323 00ea 1370     		strb	r3, [r2]
 292:../codebase/tinyprintf.c ****                 case '#':
 1324              		.loc 1 292 0
 1325 00ec 9DE7     		b	.L94
 1326              	.L130:
 294:../codebase/tinyprintf.c ****                     continue;
 1327              		.loc 1 294 0
 1328 00ee 09AA     		add	r2, sp, #36
 1329 00f0 1378     		ldrb	r3, [r2]
 1330 00f2 0221     		movs	r1, #2
 1331 00f4 0B43     		orrs	r3, r1
 1332 00f6 1370     		strb	r3, [r2]
 295:../codebase/tinyprintf.c ****                 default:
 1333              		.loc 1 295 0
 1334 00f8 97E7     		b	.L94
 1335              	.L131:
 304:../codebase/tinyprintf.c ****             }
 1336              		.loc 1 304 0
 1337 00fa 0AAB     		add	r3, sp, #40
 1338 00fc 0A22     		movs	r2, #10
 1339 00fe 01A9     		add	r1, sp, #4
 1340 0100 FFF7FEFF 		bl	a2u
 1341              	.LVL192:
 1342 0104 A2E7     		b	.L101
 1343              	.L132:
 311:../codebase/tinyprintf.c ****               /* ignore actual 0-fill size: */
 1344              		.loc 1 311 0
 1345 0106 09AA     		add	r2, sp, #36
 1346 0108 1378     		ldrb	r3, [r2]
 1347 010a 0121     		movs	r1, #1
 1348 010c 0B43     		orrs	r3, r1
 1349 010e 1370     		strb	r3, [r2]
 1350              	.L103:
 314:../codebase/tinyprintf.c ****               } while ((ch >= '0') && (ch <= '9'));
 1351              		.loc 1 314 0 discriminator 1
 1352 0110 019B     		ldr	r3, [sp, #4]
 1353 0112 5A1C     		adds	r2, r3, #1
 1354 0114 0192     		str	r2, [sp, #4]
 1355 0116 1878     		ldrb	r0, [r3]
 1356              	.LVL193:
 315:../codebase/tinyprintf.c ****             }
 1357              		.loc 1 315 0 discriminator 1
ARM GAS  /tmp/cc5t7vJc.s 			page 35


 1358 0118 0300     		movs	r3, r0
 1359 011a 303B     		subs	r3, r3, #48
 1360 011c DBB2     		uxtb	r3, r3
 1361 011e 092B     		cmp	r3, #9
 1362 0120 F6D9     		bls	.L103
 1363 0122 95E7     		b	.L102
 1364              	.L133:
 321:../codebase/tinyprintf.c ****                 if (sizeof(size_t) == sizeof(unsigned long int))
 1365              		.loc 1 321 0
 1366 0124 019B     		ldr	r3, [sp, #4]
 1367 0126 5A1C     		adds	r2, r3, #1
 1368 0128 0192     		str	r2, [sp, #4]
 1369 012a 1878     		ldrb	r0, [r3]
 1370              	.LVL194:
 323:../codebase/tinyprintf.c **** #  ifdef PRINTF_LONG_LONG_SUPPORT
 1371              		.loc 1 323 0
 1372 012c 0123     		movs	r3, #1
 1373 012e 94E7     		b	.L105
 1374              	.LVL195:
 1375              	.L134:
 334:../codebase/tinyprintf.c ****                 lng = 1;
 1376              		.loc 1 334 0
 1377 0130 019B     		ldr	r3, [sp, #4]
 1378 0132 5A1C     		adds	r2, r3, #1
 1379 0134 0192     		str	r2, [sp, #4]
 1380 0136 1878     		ldrb	r0, [r3]
 1381              	.LVL196:
 337:../codebase/tinyprintf.c ****                   ch = *(fmt++);
 1382              		.loc 1 337 0
 1383 0138 6C28     		cmp	r0, #108
 1384 013a 01D0     		beq	.L138
 335:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_LONG_SUPPORT
 1385              		.loc 1 335 0
 1386 013c 0123     		movs	r3, #1
 1387 013e 8CE7     		b	.L105
 1388              	.L138:
 338:../codebase/tinyprintf.c ****                   lng = 2;
 1389              		.loc 1 338 0
 1390 0140 9A1C     		adds	r2, r3, #2
 1391 0142 0192     		str	r2, [sp, #4]
 1392 0144 5878     		ldrb	r0, [r3, #1]
 1393              	.LVL197:
 339:../codebase/tinyprintf.c ****                 }
 1394              		.loc 1 339 0
 1395 0146 0223     		movs	r3, #2
 1396 0148 87E7     		b	.L105
 1397              	.LVL198:
 1398              	.L135:
 344:../codebase/tinyprintf.c ****             case 0:
 1399              		.loc 1 344 0
 1400 014a 5828     		cmp	r0, #88
 1401 014c 99D0     		beq	.L108
 1402 014e 08D8     		bhi	.L109
 1403 0150 0028     		cmp	r0, #0
 1404 0152 00D1     		bne	.LCB1496
 1405 0154 97E0     		b	.L90	@long jump
 1406              	.LCB1496:
ARM GAS  /tmp/cc5t7vJc.s 			page 36


 1407 0156 2528     		cmp	r0, #37
 1408 0158 B1D1     		bne	.L91
 420:../codebase/tinyprintf.c ****             default:
 1409              		.loc 1 420 0
 1410 015a 0100     		movs	r1, r0
 1411 015c 2000     		movs	r0, r4
 1412              	.LVL199:
 1413 015e A847     		blx	r5
 1414              	.LVL200:
 1415 0160 ADE7     		b	.L91
 1416              	.LVL201:
 1417              	.L109:
 344:../codebase/tinyprintf.c ****             case 0:
 1418              		.loc 1 344 0
 1419 0162 6328     		cmp	r0, #99
 1420 0164 06D1     		bne	.L139
 412:../codebase/tinyprintf.c ****                 break;
 1421              		.loc 1 412 0
 1422 0166 009B     		ldr	r3, [sp]
 1423              	.LVL202:
 1424 0168 1A1D     		adds	r2, r3, #4
 1425 016a 0092     		str	r2, [sp]
 1426 016c 1978     		ldrb	r1, [r3]
 1427 016e 2000     		movs	r0, r4
 1428              	.LVL203:
 1429 0170 A847     		blx	r5
 1430              	.LVL204:
 413:../codebase/tinyprintf.c ****             case 's':
 1431              		.loc 1 413 0
 1432 0172 A4E7     		b	.L91
 1433              	.LVL205:
 1434              	.L139:
 344:../codebase/tinyprintf.c ****             case 0:
 1435              		.loc 1 344 0
 1436 0174 6428     		cmp	r0, #100
 1437 0176 A2D1     		bne	.L91
 1438              	.L106:
 364:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 1439              		.loc 1 364 0
 1440 0178 0A22     		movs	r2, #10
 1441 017a 0C92     		str	r2, [sp, #48]
 367:../codebase/tinyprintf.c ****                     lli2a(va_arg(va, long long int), &p);
 1442              		.loc 1 367 0
 1443 017c 022B     		cmp	r3, #2
 1444 017e 3CD0     		beq	.L140
 371:../codebase/tinyprintf.c ****                     li2a(va_arg(va, long int), &p);
 1445              		.loc 1 371 0
 1446 0180 012B     		cmp	r3, #1
 1447 0182 47D0     		beq	.L141
 375:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 1448              		.loc 1 375 0
 1449 0184 009B     		ldr	r3, [sp]
 1450              	.LVL206:
 1451 0186 1A1D     		adds	r2, r3, #4
 1452 0188 0092     		str	r2, [sp]
 1453 018a 1868     		ldr	r0, [r3]
 1454              	.LVL207:
ARM GAS  /tmp/cc5t7vJc.s 			page 37


 1455 018c 09A9     		add	r1, sp, #36
 1456 018e FFF7FEFF 		bl	i2a
 1457              	.LVL208:
 1458              	.L122:
 376:../codebase/tinyprintf.c ****                 break;
 1459              		.loc 1 376 0
 1460 0192 09AA     		add	r2, sp, #36
 1461 0194 2900     		movs	r1, r5
 1462 0196 2000     		movs	r0, r4
 1463 0198 FFF7FEFF 		bl	putchw
 1464              	.LVL209:
 377:../codebase/tinyprintf.c **** #ifdef SIZEOF_POINTER
 1465              		.loc 1 377 0
 1466 019c 8FE7     		b	.L91
 1467              	.LVL210:
 1468              	.L114:
 344:../codebase/tinyprintf.c ****             case 0:
 1469              		.loc 1 344 0
 1470 019e 7528     		cmp	r0, #117
 1471 01a0 12D1     		bne	.L142
 348:../codebase/tinyprintf.c **** #ifdef PRINTF_LONG_SUPPORT
 1472              		.loc 1 348 0
 1473 01a2 0A22     		movs	r2, #10
 1474 01a4 0C92     		str	r2, [sp, #48]
 351:../codebase/tinyprintf.c ****                     ulli2a(va_arg(va, unsigned long long int), &p);
 1475              		.loc 1 351 0
 1476 01a6 022B     		cmp	r3, #2
 1477 01a8 12D0     		beq	.L143
 355:../codebase/tinyprintf.c ****                     uli2a(va_arg(va, unsigned long int), &p);
 1478              		.loc 1 355 0
 1479 01aa 012B     		cmp	r3, #1
 1480 01ac 1DD0     		beq	.L144
 359:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 1481              		.loc 1 359 0
 1482 01ae 009B     		ldr	r3, [sp]
 1483              	.LVL211:
 1484 01b0 1A1D     		adds	r2, r3, #4
 1485 01b2 0092     		str	r2, [sp]
 1486 01b4 1868     		ldr	r0, [r3]
 1487              	.LVL212:
 1488 01b6 09A9     		add	r1, sp, #36
 1489 01b8 FFF7FEFF 		bl	ui2a
 1490              	.LVL213:
 1491              	.L119:
 360:../codebase/tinyprintf.c ****                 break;
 1492              		.loc 1 360 0
 1493 01bc 09AA     		add	r2, sp, #36
 1494 01be 2900     		movs	r1, r5
 1495 01c0 2000     		movs	r0, r4
 1496 01c2 FFF7FEFF 		bl	putchw
 1497              	.LVL214:
 361:../codebase/tinyprintf.c ****             case 'd':
 1498              		.loc 1 361 0
 1499 01c6 7AE7     		b	.L91
 1500              	.LVL215:
 1501              	.L142:
 344:../codebase/tinyprintf.c ****             case 0:
ARM GAS  /tmp/cc5t7vJc.s 			page 38


 1502              		.loc 1 344 0
 1503 01c8 7828     		cmp	r0, #120
 1504 01ca 00D1     		bne	.LCB1599
 1505 01cc 59E7     		b	.L108	@long jump
 1506              	.LCB1599:
 1507 01ce 76E7     		b	.L91
 1508              	.L143:
 352:../codebase/tinyprintf.c ****                 else
 1509              		.loc 1 352 0
 1510 01d0 009B     		ldr	r3, [sp]
 1511              	.LVL216:
 1512 01d2 0733     		adds	r3, r3, #7
 1513 01d4 033A     		subs	r2, r2, #3
 1514 01d6 9343     		bics	r3, r2
 1515 01d8 1A00     		movs	r2, r3
 1516 01da 0832     		adds	r2, r2, #8
 1517 01dc 0092     		str	r2, [sp]
 1518 01de 1868     		ldr	r0, [r3]
 1519 01e0 5968     		ldr	r1, [r3, #4]
 1520              	.LVL217:
 1521 01e2 09AA     		add	r2, sp, #36
 1522 01e4 FFF7FEFF 		bl	ulli2a
 1523              	.LVL218:
 1524 01e8 E8E7     		b	.L119
 1525              	.LVL219:
 1526              	.L144:
 356:../codebase/tinyprintf.c ****                 else
 1527              		.loc 1 356 0
 1528 01ea 009B     		ldr	r3, [sp]
 1529              	.LVL220:
 1530 01ec 1A1D     		adds	r2, r3, #4
 1531 01ee 0092     		str	r2, [sp]
 1532 01f0 1868     		ldr	r0, [r3]
 1533              	.LVL221:
 1534 01f2 09A9     		add	r1, sp, #36
 1535 01f4 FFF7FEFF 		bl	uli2a
 1536              	.LVL222:
 1537 01f8 E0E7     		b	.L119
 1538              	.LVL223:
 1539              	.L140:
 368:../codebase/tinyprintf.c ****                 else
 1540              		.loc 1 368 0
 1541 01fa 009B     		ldr	r3, [sp]
 1542              	.LVL224:
 1543 01fc 0733     		adds	r3, r3, #7
 1544 01fe 033A     		subs	r2, r2, #3
 1545 0200 9343     		bics	r3, r2
 1546 0202 1A00     		movs	r2, r3
 1547 0204 0832     		adds	r2, r2, #8
 1548 0206 0092     		str	r2, [sp]
 1549 0208 1868     		ldr	r0, [r3]
 1550 020a 5968     		ldr	r1, [r3, #4]
 1551              	.LVL225:
 1552 020c 09AA     		add	r2, sp, #36
 1553 020e FFF7FEFF 		bl	lli2a
 1554              	.LVL226:
 1555 0212 BEE7     		b	.L122
ARM GAS  /tmp/cc5t7vJc.s 			page 39


 1556              	.LVL227:
 1557              	.L141:
 372:../codebase/tinyprintf.c ****                 else
 1558              		.loc 1 372 0
 1559 0214 009B     		ldr	r3, [sp]
 1560              	.LVL228:
 1561 0216 1A1D     		adds	r2, r3, #4
 1562 0218 0092     		str	r2, [sp]
 1563 021a 1868     		ldr	r0, [r3]
 1564              	.LVL229:
 1565 021c 09A9     		add	r1, sp, #36
 1566 021e FFF7FEFF 		bl	li2a
 1567              	.LVL230:
 1568 0222 B6E7     		b	.L122
 1569              	.LVL231:
 1570              	.L136:
 396:../codebase/tinyprintf.c ****                 else
 1571              		.loc 1 396 0
 1572 0224 009B     		ldr	r3, [sp]
 1573              	.LVL232:
 1574 0226 0733     		adds	r3, r3, #7
 1575 0228 0722     		movs	r2, #7
 1576 022a 9343     		bics	r3, r2
 1577 022c 1A00     		movs	r2, r3
 1578 022e 0832     		adds	r2, r2, #8
 1579 0230 0092     		str	r2, [sp]
 1580 0232 1868     		ldr	r0, [r3]
 1581 0234 5968     		ldr	r1, [r3, #4]
 1582 0236 09AA     		add	r2, sp, #36
 1583 0238 FFF7FEFF 		bl	ulli2a
 1584              	.LVL233:
 1585 023c 3AE7     		b	.L125
 1586              	.LVL234:
 1587              	.L137:
 400:../codebase/tinyprintf.c ****                 else
 1588              		.loc 1 400 0
 1589 023e 009B     		ldr	r3, [sp]
 1590              	.LVL235:
 1591 0240 1A1D     		adds	r2, r3, #4
 1592 0242 0092     		str	r2, [sp]
 1593 0244 1868     		ldr	r0, [r3]
 1594 0246 09A9     		add	r1, sp, #36
 1595 0248 FFF7FEFF 		bl	uli2a
 1596              	.LVL236:
 1597 024c 32E7     		b	.L125
 1598              	.LVL237:
 1599              	.L115:
 407:../codebase/tinyprintf.c ****                 ui2a(va_arg(va, unsigned int), &p);
 1600              		.loc 1 407 0
 1601 024e 0823     		movs	r3, #8
 1602              	.LVL238:
 1603 0250 0C93     		str	r3, [sp, #48]
 408:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 1604              		.loc 1 408 0
 1605 0252 009B     		ldr	r3, [sp]
 1606 0254 1A1D     		adds	r2, r3, #4
 1607 0256 0092     		str	r2, [sp]
ARM GAS  /tmp/cc5t7vJc.s 			page 40


 1608 0258 1868     		ldr	r0, [r3]
 1609              	.LVL239:
 1610 025a 09A9     		add	r1, sp, #36
 1611 025c FFF7FEFF 		bl	ui2a
 1612              	.LVL240:
 409:../codebase/tinyprintf.c ****                 break;
 1613              		.loc 1 409 0
 1614 0260 09AA     		add	r2, sp, #36
 1615 0262 2900     		movs	r1, r5
 1616 0264 2000     		movs	r0, r4
 1617 0266 FFF7FEFF 		bl	putchw
 1618              	.LVL241:
 410:../codebase/tinyprintf.c ****             case 'c':
 1619              		.loc 1 410 0
 1620 026a 28E7     		b	.L91
 1621              	.LVL242:
 1622              	.L113:
 415:../codebase/tinyprintf.c ****                 putchw(putp, putf, &p);
 1623              		.loc 1 415 0
 1624 026c 009B     		ldr	r3, [sp]
 1625              	.LVL243:
 1626 026e 1A1D     		adds	r2, r3, #4
 1627 0270 0092     		str	r2, [sp]
 1628 0272 1B68     		ldr	r3, [r3]
 1629 0274 0D93     		str	r3, [sp, #52]
 416:../codebase/tinyprintf.c ****                 p.bf = bf;
 1630              		.loc 1 416 0
 1631 0276 09AA     		add	r2, sp, #36
 1632 0278 2900     		movs	r1, r5
 1633 027a 2000     		movs	r0, r4
 1634              	.LVL244:
 1635 027c FFF7FEFF 		bl	putchw
 1636              	.LVL245:
 417:../codebase/tinyprintf.c ****                 break;
 1637              		.loc 1 417 0
 1638 0280 03AB     		add	r3, sp, #12
 1639 0282 0D93     		str	r3, [sp, #52]
 418:../codebase/tinyprintf.c ****             case '%':
 1640              		.loc 1 418 0
 1641 0284 1BE7     		b	.L91
 1642              	.L110:
 1643              	.L90:
 1644              	.LBE9:
 427:../codebase/tinyprintf.c **** 
 1645              		.loc 1 427 0
 1646 0286 0EB0     		add	sp, sp, #56
 1647              		@ sp needed
 1648              	.LVL246:
 1649              	.LVL247:
 1650 0288 70BD     		pop	{r4, r5, r6, pc}
 1651              		.cfi_endproc
 1652              	.LFE9:
 1654              		.section	.text.init_printf,"ax",%progbits
 1655              		.align	1
 1656              		.global	init_printf
 1657              		.syntax unified
 1658              		.code	16
ARM GAS  /tmp/cc5t7vJc.s 			page 41


 1659              		.thumb_func
 1660              		.fpu softvfp
 1662              	init_printf:
 1663              	.LFB10:
 434:../codebase/tinyprintf.c ****     stdout_putf = putf;
 1664              		.loc 1 434 0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 0
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
 1668              		@ link register save eliminated.
 1669              	.LVL248:
 435:../codebase/tinyprintf.c ****     stdout_putp = putp;
 1670              		.loc 1 435 0
 1671 0000 024B     		ldr	r3, .L146
 1672 0002 1960     		str	r1, [r3]
 436:../codebase/tinyprintf.c **** }
 1673              		.loc 1 436 0
 1674 0004 024B     		ldr	r3, .L146+4
 1675 0006 1860     		str	r0, [r3]
 437:../codebase/tinyprintf.c **** 
 1676              		.loc 1 437 0
 1677              		@ sp needed
 1678 0008 7047     		bx	lr
 1679              	.L147:
 1680 000a C046     		.align	2
 1681              	.L146:
 1682 000c 00000000 		.word	.LANCHOR0
 1683 0010 00000000 		.word	.LANCHOR1
 1684              		.cfi_endproc
 1685              	.LFE10:
 1687              		.section	.text.tfp_printf,"ax",%progbits
 1688              		.align	1
 1689              		.global	tfp_printf
 1690              		.syntax unified
 1691              		.code	16
 1692              		.thumb_func
 1693              		.fpu softvfp
 1695              	tfp_printf:
 1696              	.LFB11:
 440:../codebase/tinyprintf.c ****     va_list va;
 1697              		.loc 1 440 0
 1698              		.cfi_startproc
 1699              		@ args = 4, pretend = 16, frame = 8
 1700              		@ frame_needed = 0, uses_anonymous_args = 1
 1701              	.LVL249:
 1702 0000 0FB4     		push	{r0, r1, r2, r3}
 1703              	.LCFI19:
 1704              		.cfi_def_cfa_offset 16
 1705 0002 10B5     		push	{r4, lr}
 1706              	.LCFI20:
 1707              		.cfi_def_cfa_offset 24
 1708              		.cfi_offset 4, -24
 1709              		.cfi_offset 14, -20
 1710 0004 82B0     		sub	sp, sp, #8
 1711              	.LCFI21:
 1712              		.cfi_def_cfa_offset 32
 1713 0006 04AB     		add	r3, sp, #16
ARM GAS  /tmp/cc5t7vJc.s 			page 42


 1714 0008 04CB     		ldmia	r3!, {r2}
 442:../codebase/tinyprintf.c ****     tfp_format(stdout_putp, stdout_putf, fmt, va);
 1715              		.loc 1 442 0
 1716 000a 0193     		str	r3, [sp, #4]
 443:../codebase/tinyprintf.c ****     //To inform that the printf line is done
 1717              		.loc 1 443 0
 1718 000c 074C     		ldr	r4, .L149
 1719 000e 0849     		ldr	r1, .L149+4
 1720 0010 0868     		ldr	r0, [r1]
 1721 0012 2168     		ldr	r1, [r4]
 1722 0014 FFF7FEFF 		bl	tfp_format
 1723              	.LVL250:
 445:../codebase/tinyprintf.c ****     va_end(va);
 1724              		.loc 1 445 0
 1725 0018 2368     		ldr	r3, [r4]
 1726 001a 0021     		movs	r1, #0
 1727 001c 0020     		movs	r0, #0
 1728 001e 9847     		blx	r3
 1729              	.LVL251:
 447:../codebase/tinyprintf.c **** #endif
 1730              		.loc 1 447 0
 1731 0020 02B0     		add	sp, sp, #8
 1732              		@ sp needed
 1733 0022 10BC     		pop	{r4}
 1734 0024 08BC     		pop	{r3}
 1735 0026 04B0     		add	sp, sp, #16
 1736 0028 1847     		bx	r3
 1737              	.L150:
 1738 002a C046     		.align	2
 1739              	.L149:
 1740 002c 00000000 		.word	.LANCHOR0
 1741 0030 00000000 		.word	.LANCHOR1
 1742              		.cfi_endproc
 1743              	.LFE11:
 1745              		.section	.text.tfp_vsnprintf,"ax",%progbits
 1746              		.align	1
 1747              		.global	tfp_vsnprintf
 1748              		.syntax unified
 1749              		.code	16
 1750              		.thumb_func
 1751              		.fpu softvfp
 1753              	tfp_vsnprintf:
 1754              	.LFB13:
 467:../codebase/tinyprintf.c ****   struct _vsnprintf_putcf_data data;
 1755              		.loc 1 467 0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 16
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              	.LVL252:
 1760 0000 00B5     		push	{lr}
 1761              	.LCFI22:
 1762              		.cfi_def_cfa_offset 4
 1763              		.cfi_offset 14, -4
 1764 0002 85B0     		sub	sp, sp, #20
 1765              	.LCFI23:
 1766              		.cfi_def_cfa_offset 24
 470:../codebase/tinyprintf.c ****     return 0;
ARM GAS  /tmp/cc5t7vJc.s 			page 43


 1767              		.loc 1 470 0
 1768 0004 0029     		cmp	r1, #0
 1769 0006 02D1     		bne	.L156
 471:../codebase/tinyprintf.c **** 
 1770              		.loc 1 471 0
 1771 0008 0020     		movs	r0, #0
 1772              	.LVL253:
 1773              	.L151:
 484:../codebase/tinyprintf.c **** 
 1774              		.loc 1 484 0
 1775 000a 05B0     		add	sp, sp, #20
 1776              		@ sp needed
 1777 000c 00BD     		pop	{pc}
 1778              	.LVL254:
 1779              	.L156:
 473:../codebase/tinyprintf.c ****   data.dest_capacity = size-1;
 1780              		.loc 1 473 0
 1781 000e 0290     		str	r0, [sp, #8]
 474:../codebase/tinyprintf.c ****   data.num_chars = 0;
 1782              		.loc 1 474 0
 1783 0010 0139     		subs	r1, r1, #1
 1784              	.LVL255:
 1785 0012 0191     		str	r1, [sp, #4]
 475:../codebase/tinyprintf.c ****   tfp_format(&data, _vsnprintf_putcf, format, ap);
 1786              		.loc 1 475 0
 1787 0014 0021     		movs	r1, #0
 1788              	.LVL256:
 1789 0016 0391     		str	r1, [sp, #12]
 476:../codebase/tinyprintf.c **** 
 1790              		.loc 1 476 0
 1791 0018 0A49     		ldr	r1, .L157
 1792 001a 01A8     		add	r0, sp, #4
 1793              	.LVL257:
 1794 001c FFF7FEFF 		bl	tfp_format
 1795              	.LVL258:
 478:../codebase/tinyprintf.c ****     data.dest[data.num_chars] = '\0';
 1796              		.loc 1 478 0
 1797 0020 039A     		ldr	r2, [sp, #12]
 1798 0022 019B     		ldr	r3, [sp, #4]
 1799 0024 9A42     		cmp	r2, r3
 1800 0026 06D2     		bcs	.L153
 479:../codebase/tinyprintf.c ****   else
 1801              		.loc 1 479 0
 1802 0028 029B     		ldr	r3, [sp, #8]
 1803 002a 9C46     		mov	ip, r3
 1804 002c 6244     		add	r2, r2, ip
 1805 002e 0023     		movs	r3, #0
 1806 0030 1370     		strb	r3, [r2]
 1807              	.L154:
 483:../codebase/tinyprintf.c **** }
 1808              		.loc 1 483 0
 1809 0032 0398     		ldr	r0, [sp, #12]
 1810 0034 E9E7     		b	.L151
 1811              	.L153:
 481:../codebase/tinyprintf.c **** 
 1812              		.loc 1 481 0
 1813 0036 029A     		ldr	r2, [sp, #8]
ARM GAS  /tmp/cc5t7vJc.s 			page 44


 1814 0038 9446     		mov	ip, r2
 1815 003a 6344     		add	r3, r3, ip
 1816 003c 0022     		movs	r2, #0
 1817 003e 1A70     		strb	r2, [r3]
 1818 0040 F7E7     		b	.L154
 1819              	.L158:
 1820 0042 C046     		.align	2
 1821              	.L157:
 1822 0044 00000000 		.word	_vsnprintf_putcf
 1823              		.cfi_endproc
 1824              	.LFE13:
 1826              		.section	.text.tfp_snprintf,"ax",%progbits
 1827              		.align	1
 1828              		.global	tfp_snprintf
 1829              		.syntax unified
 1830              		.code	16
 1831              		.thumb_func
 1832              		.fpu softvfp
 1834              	tfp_snprintf:
 1835              	.LFB14:
 487:../codebase/tinyprintf.c ****   va_list ap;
 1836              		.loc 1 487 0
 1837              		.cfi_startproc
 1838              		@ args = 4, pretend = 8, frame = 8
 1839              		@ frame_needed = 0, uses_anonymous_args = 1
 1840              	.LVL259:
 1841 0000 0CB4     		push	{r2, r3}
 1842              	.LCFI24:
 1843              		.cfi_def_cfa_offset 8
 1844 0002 00B5     		push	{lr}
 1845              	.LCFI25:
 1846              		.cfi_def_cfa_offset 12
 1847              		.cfi_offset 14, -12
 1848 0004 83B0     		sub	sp, sp, #12
 1849              	.LCFI26:
 1850              		.cfi_def_cfa_offset 24
 1851 0006 04AB     		add	r3, sp, #16
 1852 0008 04CB     		ldmia	r3!, {r2}
 491:../codebase/tinyprintf.c ****   retval = tfp_vsnprintf(str, size, format, ap);
 1853              		.loc 1 491 0
 1854 000a 0193     		str	r3, [sp, #4]
 492:../codebase/tinyprintf.c ****   va_end(ap);
 1855              		.loc 1 492 0
 1856 000c FFF7FEFF 		bl	tfp_vsnprintf
 1857              	.LVL260:
 495:../codebase/tinyprintf.c **** 
 1858              		.loc 1 495 0
 1859 0010 03B0     		add	sp, sp, #12
 1860              		@ sp needed
 1861 0012 08BC     		pop	{r3}
 1862 0014 02B0     		add	sp, sp, #8
 1863 0016 1847     		bx	r3
 1864              		.cfi_endproc
 1865              	.LFE14:
 1867              		.section	.text.tfp_vsprintf,"ax",%progbits
 1868              		.align	1
 1869              		.global	tfp_vsprintf
ARM GAS  /tmp/cc5t7vJc.s 			page 45


 1870              		.syntax unified
 1871              		.code	16
 1872              		.thumb_func
 1873              		.fpu softvfp
 1875              	tfp_vsprintf:
 1876              	.LFB16:
 508:../codebase/tinyprintf.c **** 
 509:../codebase/tinyprintf.c **** int tfp_vsprintf(char *str, const char *format, va_list ap)
 510:../codebase/tinyprintf.c **** {
 1877              		.loc 1 510 0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 16
 1880              		@ frame_needed = 0, uses_anonymous_args = 0
 1881              	.LVL261:
 1882 0000 10B5     		push	{r4, lr}
 1883              	.LCFI27:
 1884              		.cfi_def_cfa_offset 8
 1885              		.cfi_offset 4, -8
 1886              		.cfi_offset 14, -4
 1887 0002 84B0     		sub	sp, sp, #16
 1888              	.LCFI28:
 1889              		.cfi_def_cfa_offset 24
 1890 0004 1300     		movs	r3, r2
 511:../codebase/tinyprintf.c ****   struct _vsprintf_putcf_data data;
 512:../codebase/tinyprintf.c ****   data.dest = str;
 1891              		.loc 1 512 0
 1892 0006 0290     		str	r0, [sp, #8]
 513:../codebase/tinyprintf.c ****   data.num_chars = 0;
 1893              		.loc 1 513 0
 1894 0008 0024     		movs	r4, #0
 1895 000a 0394     		str	r4, [sp, #12]
 514:../codebase/tinyprintf.c ****   tfp_format(&data, _vsprintf_putcf, format, ap);
 1896              		.loc 1 514 0
 1897 000c 0A00     		movs	r2, r1
 1898              	.LVL262:
 1899 000e 0649     		ldr	r1, .L161
 1900              	.LVL263:
 1901 0010 02A8     		add	r0, sp, #8
 1902              	.LVL264:
 1903 0012 FFF7FEFF 		bl	tfp_format
 1904              	.LVL265:
 515:../codebase/tinyprintf.c ****   data.dest[data.num_chars] = '\0';
 1905              		.loc 1 515 0
 1906 0016 039B     		ldr	r3, [sp, #12]
 1907 0018 0193     		str	r3, [sp, #4]
 1908 001a 029A     		ldr	r2, [sp, #8]
 1909 001c 9446     		mov	ip, r2
 1910 001e 6344     		add	r3, r3, ip
 1911 0020 1C70     		strb	r4, [r3]
 516:../codebase/tinyprintf.c ****   return data.num_chars;
 1912              		.loc 1 516 0
 1913 0022 0398     		ldr	r0, [sp, #12]
 517:../codebase/tinyprintf.c **** }
 1914              		.loc 1 517 0
 1915 0024 04B0     		add	sp, sp, #16
 1916              		@ sp needed
 1917 0026 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cc5t7vJc.s 			page 46


 1918              	.L162:
 1919              		.align	2
 1920              	.L161:
 1921 0028 00000000 		.word	_vsprintf_putcf
 1922              		.cfi_endproc
 1923              	.LFE16:
 1925              		.section	.text.tfp_sprintf,"ax",%progbits
 1926              		.align	1
 1927              		.global	tfp_sprintf
 1928              		.syntax unified
 1929              		.code	16
 1930              		.thumb_func
 1931              		.fpu softvfp
 1933              	tfp_sprintf:
 1934              	.LFB17:
 518:../codebase/tinyprintf.c **** 
 519:../codebase/tinyprintf.c **** int tfp_sprintf(char *str, const char *format, ...)
 520:../codebase/tinyprintf.c **** {
 1935              		.loc 1 520 0
 1936              		.cfi_startproc
 1937              		@ args = 4, pretend = 12, frame = 8
 1938              		@ frame_needed = 0, uses_anonymous_args = 1
 1939              	.LVL266:
 1940 0000 0EB4     		push	{r1, r2, r3}
 1941              	.LCFI29:
 1942              		.cfi_def_cfa_offset 12
 1943 0002 00B5     		push	{lr}
 1944              	.LCFI30:
 1945              		.cfi_def_cfa_offset 16
 1946              		.cfi_offset 14, -16
 1947 0004 82B0     		sub	sp, sp, #8
 1948              	.LCFI31:
 1949              		.cfi_def_cfa_offset 24
 1950 0006 03AA     		add	r2, sp, #12
 1951 0008 02CA     		ldmia	r2!, {r1}
 521:../codebase/tinyprintf.c ****   va_list ap;
 522:../codebase/tinyprintf.c ****   int retval;
 523:../codebase/tinyprintf.c **** 
 524:../codebase/tinyprintf.c ****   va_start(ap, format);
 1952              		.loc 1 524 0
 1953 000a 0192     		str	r2, [sp, #4]
 525:../codebase/tinyprintf.c ****   retval = tfp_vsprintf(str, format, ap);
 1954              		.loc 1 525 0
 1955 000c FFF7FEFF 		bl	tfp_vsprintf
 1956              	.LVL267:
 526:../codebase/tinyprintf.c ****   va_end(ap);
 527:../codebase/tinyprintf.c ****   return retval;
 528:../codebase/tinyprintf.c **** }
 1957              		.loc 1 528 0
 1958 0010 02B0     		add	sp, sp, #8
 1959              		@ sp needed
 1960 0012 08BC     		pop	{r3}
 1961 0014 03B0     		add	sp, sp, #12
 1962 0016 1847     		bx	r3
 1963              		.cfi_endproc
 1964              	.LFE17:
 1966              		.section	.bss.stdout_putf,"aw",%nobits
ARM GAS  /tmp/cc5t7vJc.s 			page 47


 1967              		.align	2
 1968              		.set	.LANCHOR0,. + 0
 1971              	stdout_putf:
 1972 0000 00000000 		.space	4
 1973              		.section	.bss.stdout_putp,"aw",%nobits
 1974              		.align	2
 1975              		.set	.LANCHOR1,. + 0
 1978              	stdout_putp:
 1979 0000 00000000 		.space	4
 1980              		.text
 1981              	.Letext0:
 1982              		.file 2 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.
 1983              		.file 3 "/usr/local/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.
 1984              		.file 4 "../codebase/tinyprintf.h"
 1985              		.file 5 "<built-in>"
ARM GAS  /tmp/cc5t7vJc.s 			page 48


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tinyprintf.c
     /tmp/cc5t7vJc.s:18     .text.ulli2a:0000000000000000 $t
     /tmp/cc5t7vJc.s:24     .text.ulli2a:0000000000000000 ulli2a
     /tmp/cc5t7vJc.s:213    .text.lli2a:0000000000000000 $t
     /tmp/cc5t7vJc.s:219    .text.lli2a:0000000000000000 lli2a
     /tmp/cc5t7vJc.s:257    .text.uli2a:0000000000000000 $t
     /tmp/cc5t7vJc.s:263    .text.uli2a:0000000000000000 uli2a
     /tmp/cc5t7vJc.s:416    .text.li2a:0000000000000000 $t
     /tmp/cc5t7vJc.s:422    .text.li2a:0000000000000000 li2a
     /tmp/cc5t7vJc.s:457    .text.ui2a:0000000000000000 $t
     /tmp/cc5t7vJc.s:463    .text.ui2a:0000000000000000 ui2a
     /tmp/cc5t7vJc.s:616    .text.i2a:0000000000000000 $t
     /tmp/cc5t7vJc.s:622    .text.i2a:0000000000000000 i2a
     /tmp/cc5t7vJc.s:657    .text.a2d:0000000000000000 $t
     /tmp/cc5t7vJc.s:663    .text.a2d:0000000000000000 a2d
     /tmp/cc5t7vJc.s:719    .text.a2u:0000000000000000 $t
     /tmp/cc5t7vJc.s:725    .text.a2u:0000000000000000 a2u
     /tmp/cc5t7vJc.s:804    .text.putchw:0000000000000000 $t
     /tmp/cc5t7vJc.s:810    .text.putchw:0000000000000000 putchw
     /tmp/cc5t7vJc.s:1054   .text._vsnprintf_putcf:0000000000000000 $t
     /tmp/cc5t7vJc.s:1060   .text._vsnprintf_putcf:0000000000000000 _vsnprintf_putcf
     /tmp/cc5t7vJc.s:1088   .text._vsprintf_putcf:0000000000000000 $t
     /tmp/cc5t7vJc.s:1094   .text._vsprintf_putcf:0000000000000000 _vsprintf_putcf
     /tmp/cc5t7vJc.s:1120   .text.tfp_format:0000000000000000 $t
     /tmp/cc5t7vJc.s:1127   .text.tfp_format:0000000000000000 tfp_format
     /tmp/cc5t7vJc.s:1655   .text.init_printf:0000000000000000 $t
     /tmp/cc5t7vJc.s:1662   .text.init_printf:0000000000000000 init_printf
     /tmp/cc5t7vJc.s:1682   .text.init_printf:000000000000000c $d
     /tmp/cc5t7vJc.s:1688   .text.tfp_printf:0000000000000000 $t
     /tmp/cc5t7vJc.s:1695   .text.tfp_printf:0000000000000000 tfp_printf
     /tmp/cc5t7vJc.s:1740   .text.tfp_printf:000000000000002c $d
     /tmp/cc5t7vJc.s:1746   .text.tfp_vsnprintf:0000000000000000 $t
     /tmp/cc5t7vJc.s:1753   .text.tfp_vsnprintf:0000000000000000 tfp_vsnprintf
     /tmp/cc5t7vJc.s:1822   .text.tfp_vsnprintf:0000000000000044 $d
     /tmp/cc5t7vJc.s:1827   .text.tfp_snprintf:0000000000000000 $t
     /tmp/cc5t7vJc.s:1834   .text.tfp_snprintf:0000000000000000 tfp_snprintf
     /tmp/cc5t7vJc.s:1868   .text.tfp_vsprintf:0000000000000000 $t
     /tmp/cc5t7vJc.s:1875   .text.tfp_vsprintf:0000000000000000 tfp_vsprintf
     /tmp/cc5t7vJc.s:1921   .text.tfp_vsprintf:0000000000000028 $d
     /tmp/cc5t7vJc.s:1926   .text.tfp_sprintf:0000000000000000 $t
     /tmp/cc5t7vJc.s:1933   .text.tfp_sprintf:0000000000000000 tfp_sprintf
     /tmp/cc5t7vJc.s:1967   .bss.stdout_putf:0000000000000000 $d
     /tmp/cc5t7vJc.s:1971   .bss.stdout_putf:0000000000000000 stdout_putf
     /tmp/cc5t7vJc.s:1974   .bss.stdout_putp:0000000000000000 $d
     /tmp/cc5t7vJc.s:1978   .bss.stdout_putp:0000000000000000 stdout_putp
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_lmul
__aeabi_uldivmod
__aeabi_uidiv
__aeabi_uidivmod
